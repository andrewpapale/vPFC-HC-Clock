}
data_m <- rhdf5::h5read(file = curr_muse_electrode, name = 'EEGMuse/epoch_data_feedback')
data_m <- as.data.table(reshape_mat(data_m))
reshape_mat <- function(data) {df <- data %>% # reshapes from .mat and winsorizes data to z = 7.5
reshape2::melt() %>%
setDT() %>%
# na.omit() %>%
rename(trial = Var1, t_bin = Var2, electrode = Var3, signal = value) %>% group_by(t_bin, electrode) %>%
#mutate(signal = as.vector(signal - min(signal,na.rm=TRUE)/(max(signal,na.rm=TRUE) - min(signal,na.rm=TRUE)))) %>% ungroup()
mutate(signal = as.vector(scale(signal,center=TRUE,scale=TRUE))) %>% ungroup()
return(df)
}
data_m <- rhdf5::h5read(file = curr_muse_electrode, name = 'EEGMuse/epoch_data_feedback')
data_m <- as.data.table(reshape_mat(data_m))
data_m
reshape_mat <- function(data) {df <- data %>% # reshapes from .mat and winsorizes data to z = 7.5
reshape2::melt() %>%
setDT() %>%
# na.omit() %>%
rename(trial = Var1, t_bin = Var2, electrode = Var3, signal = value) %>% group_by(electrode) %>%
#mutate(signal = as.vector(signal - min(signal,na.rm=TRUE)/(max(signal,na.rm=TRUE) - min(signal,na.rm=TRUE)))) %>% ungroup()
mutate(signal = as.vector(scale(signal,center=TRUE,scale=TRUE))) %>% ungroup()
return(df)
}
temp_b <- str_split(curr_biosemi_electrode,'/')
curr_biosemi_electrode <- biosemi_files
curr_muse_electrode <- muse_files
biosemi_files <- dir(path=paste0(curr_subj),pattern='biosemiEEG.mat',full.names = TRUE)
muse_files <- dir(path=paste0(curr_subj),pattern='museEEG.mat',full.names = TRUE)
dirs = dir(path='/Volumes/tfr_rds1/MOMENTUM/EEGData',pattern='^\\d\\d\\d\\d\\d\\d$',full.names = TRUE)
curr_subj <- dirs[1]
biosemi_files <- dir(path=paste0(curr_subj),pattern='biosemiEEG.mat',full.names = TRUE)
muse_files <- dir(path=paste0(curr_subj),pattern='museEEG.mat',full.names = TRUE)
curr_biosemi_electrode <- biosemi_files
curr_muse_electrode <- muse_files
data_m <- rhdf5::h5read(file = curr_muse_electrode, name = 'EEGMuse/epoch_data_feedback')
data_m <- as.data.table(reshape_mat(data_m))
temp_m <- str_split(curr_muse_electrode,'/')
temp_m <- temp_m[[1]][8]
temp_m <- str_split(temp_m,'_')
temp_m <- paste0(temp_m[[1]][4],'_',temp_m[[1]][5])
temp_m <- sub('.mat',"",temp_m)
temp_m <- str_split(curr_muse_electrode,'/')
temp_m
temp_m <- temp_m[[1]][6]
temp_m <- str_split(temp_m,'_')
temp_m
library(tseries)
install.packages('tseries')
source("/Volumes/Users/Andrew/alex_vmPFC_HC_medusa.R", echo=TRUE)
source("/Volumes/Users/Andrew/alex_vmPFC_HC_medusa.R", echo=TRUE)
rlang::last_trace()
colnames(vmPFC)
vmPFC <- vmPFC %>% select(id,run,run_trial,atlas_value,evt_time,symmetry_group,network) %>% rename(vmPFC_decon = decon_mean) %>%
group_by(id, run, run_trial, atlas_value) %>% arrange(evt_time) %>% mutate(
vmPFC_lag = lag(vmPFC_decon),
vmPFC_lag2 = lag(vmPFC_decon, 2),
vmPFC_lag3 = lag(vmPFC_decon, 3),
) %>% ungroup()
# feedback-aligned
# read in vmPFC and HC data
message("Loading vmPFC medusa data from cache: ", cache_dir)
#load(file.path(cache_dir,  'feedback_vmPFC_Schaefer_tall_ts_1.Rdata'))
load('/Users/dnplserv/vmPFC/MEDUSA Schaefer Analysis/MMclock_fb_Aug2023.Rdata')
colnames(vmPFC)
vmPFC <- fb_comb %>% select(id,run,run_trial,atlas_value,evt_time,symmetry_group,network) %>% rename(vmPFC_decon = decon_mean) %>%
group_by(id, run, run_trial, atlas_value) %>% arrange(evt_time) %>% mutate(
vmPFC_lag = lag(vmPFC_decon),
vmPFC_lag2 = lag(vmPFC_decon, 2),
vmPFC_lag3 = lag(vmPFC_decon, 3),
) %>% ungroup()
colnames(fb_comb)
vmPFC <- fb_comb %>% select(id,run,run_trial,atlas_value,evt_time,symmetry_group,network) %>% rename(vmPFC_decon = decon_mean) %>%
group_by(id, run, run_trial, atlas_value) %>% arrange(evt_time) %>% mutate(
vmPFC_lag = lag(vmPFC_decon),
vmPFC_lag2 = lag(vmPFC_decon, 2),
vmPFC_lag3 = lag(vmPFC_decon, 3),
) %>% ungroup()
vmPFC <- fb_comb %>% rename(vmPFC_decon = decon_mean) %>%
group_by(id, run, run_trial, atlas_value) %>% arrange(evt_time) %>% mutate(
vmPFC_lag = lag(vmPFC_decon),
vmPFC_lag2 = lag(vmPFC_decon, 2),
vmPFC_lag3 = lag(vmPFC_decon, 3),
) %>% ungroup()
# read in HC data
message('adding HC signals to models...')
#load(file.path(cache_dir,'feedback_hipp_tall_ts_1.Rdata'))
load('/Users/dnplserv/vmPFC/MEDUSA Schaefer Analysis/HC_fb_Aug2023.Rdata')
hc <- hc %>% setDT(hc) %>% select(id,run,run_trial,decon_mean,evt_time,bin_num, side) %>% mutate(
HC_region = case_when(
bin_num <= 8 ~ 'AH',
bin_num > 8 ~ 'PH'),
run_trial = as.vector(run_trial)
) %>% group_by(id,run,run_trial,evt_time,HC_region, side) %>% summarize(HC_decon = mean(decon_mean,na.rm=TRUE)) %>%  ungroup() %>%
group_by(id,run) %>% mutate(HCwithin = as.vector(scale(HC_decon)),
HCbetween=mean(HC_decon,na.rm=TRUE)) %>% ungroup() %>% group_by(id, run, run_trial, HC_region) %>% arrange(evt_time) %>% mutate(
HC_wi_lag = lag(HCwithin),
HC_wi_lag2 = lag(HCwithin, 2),
HC_wi_lag3 = lag(HCwithin, 3), ) %>% ungroup()
reduced_df <- trial_df %>% select(id, run, run_trial, v_entropy_wi, trial_neg_inv_sc, rewFunc, v_entropy_wi_change, pe_max, #v_entropy_wi_lead,
# v_entropy_wi_full, v_entropy_wi_lead_full, v_entropy_wi_change_full,
iti_ideal, iti_prev, rt_csv, rt_csv_sc, outcome, v_max_wi) %>%
mutate(iti_sc = as.vector(scale(iti_ideal)),
iti_prev_sc = as.vector(scale(iti_prev)))
# add age & sex
demo <- read.table(file=file.path(repo_directory, 'fmri/data/mmy3_demographics.tsv'),sep='\t',header=TRUE) %>% rename(id=lunaid) %>% select(!adult & !scandate) %>%
mutate(age = as.vector(scale(age))) %>% setDT()
df <- inner_join(df %>% setDT(),demo,by=c('id'))
# merge vmPFC and HC, get lags
df <- inner_join(vmPFC,hc,by=c("id","run","run_trial","evt_time")) #%>% filter(abs(evt_time) < 5)
# add trial data
df <- df %>% inner_join(reduced_df, by = c("id", "run", "run_trial"))
# add age & sex
demo <- read.table(file=file.path(repo_directory, 'fmri/data/mmy3_demographics.tsv'),sep='\t',header=TRUE) %>% rename(id=lunaid) %>% select(!adult & !scandate) %>%
mutate(age = as.vector(scale(age))) %>% setDT()
df <- inner_join(df %>% setDT(),demo,by=c('id'))
# models, feedback
vmpfc_lag = formula(~ vmPFC_lag + age*HCwithin + female*HCwithin + v_entropy_wi*HCwithin + trial_neg_inv_sc*HCwithin +v_max_wi*HCwithin  + v_entropy_wi_change*HCwithin  + rt_csv_sc*HCwithin  + iti_sc*HCwithin + outcome*HCwithin + HCbetween + (1|id/run))
vmpfc_hc_lag = formula(~ vmPFC_lag + age*HC_wi_lag + female*HC_wi_lag + v_entropy_wi*HC_wi_lag + trial_neg_inv_sc*HC_wi_lag +v_max_wi*HC_wi_lag  + v_entropy_wi_change*HC_wi_lag  + rt_csv_sc*HC_wi_lag  + iti_sc*HC_wi_lag + outcome*HC_wi_lag + HCbetween + (1|id/run))
behav_age = formula(~ age*HCwithin + female*HCwithin + v_entropy_wi*HCwithin + trial_neg_inv_sc*HCwithin +v_max_wi*HCwithin  + v_entropy_wi_change*HCwithin  + rt_csv_sc*HCwithin  + iti_sc*HCwithin + outcome*HCwithin + HCbetween + (1|id/run))
behav_by_age = formula(~ female*HCwithin + age*v_entropy_wi*HCwithin + trial_neg_inv_sc*HCwithin + age*v_max_wi*HCwithin  + age*v_entropy_wi_change*HCwithin   + rt_csv_sc*HCwithin  + iti_sc*HCwithin + outcome*HCwithin + HCbetween + (1 |id/run))
lag_sim = formula(~ vmPFC_lag + HCwithin + HC_wi_lag + HCbetween + (1|id/run))
lag_sim_beh = formula(~ vmPFC_lag + v_entropy_wi*HCwithin + v_entropy_wi*HC_wi_lag + trial_neg_inv_sc*HC_wi_lag + trial_neg_inv_sc*HCwithin +
v_max_wi*HC_wi_lag + v_max_wi*HCwithin + outcome*HC_wi_lag + outcome*HCwithin +
HCbetween + rt_csv_sc + iti_sc + outcome*HC_wi_lag  + (1|id/run))
lag_sim_age = formula(~ age*vmPFC_lag + age*HCwithin + age*HC_wi_lag + HCbetween + (1|id/run))
lag_sim_age_rs = formula(~ age*vmPFC_lag + age*HCwithin + age*HC_wi_lag + HCbetween + (vmPFC_lag + HCwithin + HC_wi_lag|id/run))
# similar to lag_sim_age but only for vmPFC seed and HC target
v_to_h_lag_sim_age = formula(~ age*vmPFC_lag + age*vmPFC_decon + age*HC_wi_lag + (1|id/run))
v_to_h_lag_sim_age_rs = formula(~ age*vmPFC_lag + age*vmPFC_decon + age*HC_wi_lag + (vmPFC_decon + vmPFC_lag + HC_wi_lag|id/run))
# models, clock, vmPFC target
vmpfc_hc_lag_clock = formula(~ vmPFC_lag + age*HC_wi_lag + female*HC_wi_lag + v_entropy_wi*HC_wi_lag + trial_neg_inv_sc*HC_wi_lag +v_max_wi*HC_wi_lag  + v_entropy_wi_change_lag*HC_wi_lag  + rt_csv_sc*HC_wi_lag  + iti_prev_sc*HC_wi_lag + outcome_lag*HC_wi_lag + HCbetween + (1|id/run))
lag_sim_age_clock =     formula(~  vmPFC_lag + age*HC_wi_lag + female*HC_wi_lag + v_entropy_wi*HC_wi_lag + trial_neg_inv_sc*HC_wi_lag +v_max_wi*HC_wi_lag  + v_entropy_wi_change_lag*HC_wi_lag  + rt_csv_sc*HC_wi_lag  + iti_prev_sc*HC_wi_lag + outcome_lag*HC_wi_lag + HCwithin + HCbetween + (1|id/run))
lag_sim_age_clock_rs =  formula(~  vmPFC_lag + age*HC_wi_lag + female*HC_wi_lag + age*v_entropy_wi*HC_wi_lag + trial_neg_inv_sc*HC_wi_lag + age*v_max_wi*HC_wi_lag  + age*v_entropy_wi_change_lag*HC_wi_lag  + rt_csv_sc*HC_wi_lag  + iti_prev_sc*HC_wi_lag + outcome_lag*HC_wi_lag + HCwithin + HCbetween + (1 + HC_wi_lag + HCwithin|id/run))
# models, clock, HC target
v_to_h_vmpfc_hc_lag_clock = formula(~ HC_wi_lag + age*vmPFC_lag + female*vmPFC_lag + v_entropy_wi*vmPFC_lag + trial_neg_inv_sc*vmPFC_lag +v_max_wi*vmPFC_lag  + v_entropy_wi_change_lag*vmPFC_lag  + rt_csv_sc*vmPFC_lag  + iti_prev_sc*vmPFC_lag + outcome_lag*vmPFC_lag + (1|id/run))
v_to_h_lag_sim_age_clock = formula(~  HC_wi_lag + age*vmPFC_lag + female*vmPFC_lag + v_entropy_wi*vmPFC_lag + trial_neg_inv_sc*vmPFC_lag +v_max_wi*vmPFC_lag  + v_entropy_wi_change_lag*vmPFC_lag  + rt_csv_sc*vmPFC_lag  + iti_prev_sc*vmPFC_lag + outcome_lag*vmPFC_lag + vmPFC_decon + (1|id/run))
flist <- named_list(lag_sim_age_clock_rs)
splits <- c("network", "evt_time", "HC_region")
message("Running mixed_by")
ddf <- mixed_by(df, outcomes = "vmPFC_decon", rhs_model_formulae = flist, # "decon_mean1" renamed "HC_decon" for consistency
split_on = splits, scale_predictors = c("pe_max_lag"),
tidy_args = list(effects = c("fixed", "ran_vals", "ran_pars", "ran_coefs"), conf.int = TRUE),
calculate = c("parameter_estimates_reml"), ncores = 12, refit_on_nonconvergence = 5, padjust_by = "term",
# emtrends_spec = list(
#   abspe = list(outcome = "decon_interp", model_name = "enc_rt_int", var = "abs_pe", specs = c("outcome")))
)
df <- df %>% group_by(id) %>% muatate(v_entropy_wi_change_lag = lag(v_entropy_wi_change), outcome_lag = lag(outcome))
df <- df %>% group_by(id) %>% mutate(v_entropy_wi_change_lag = lag(v_entropy_wi_change), outcome_lag = lag(outcome))
# models, feedback
vmpfc_lag = formula(~ vmPFC_lag + age*HCwithin + female*HCwithin + v_entropy_wi*HCwithin + trial_neg_inv_sc*HCwithin +v_max_wi*HCwithin  + v_entropy_wi_change*HCwithin  + rt_csv_sc*HCwithin  + iti_sc*HCwithin + outcome*HCwithin + HCbetween + (1|id/run))
vmpfc_hc_lag = formula(~ vmPFC_lag + age*HC_wi_lag + female*HC_wi_lag + v_entropy_wi*HC_wi_lag + trial_neg_inv_sc*HC_wi_lag +v_max_wi*HC_wi_lag  + v_entropy_wi_change*HC_wi_lag  + rt_csv_sc*HC_wi_lag  + iti_sc*HC_wi_lag + outcome*HC_wi_lag + HCbetween + (1|id/run))
behav_age = formula(~ age*HCwithin + female*HCwithin + v_entropy_wi*HCwithin + trial_neg_inv_sc*HCwithin +v_max_wi*HCwithin  + v_entropy_wi_change*HCwithin  + rt_csv_sc*HCwithin  + iti_sc*HCwithin + outcome*HCwithin + HCbetween + (1|id/run))
behav_by_age = formula(~ female*HCwithin + age*v_entropy_wi*HCwithin + trial_neg_inv_sc*HCwithin + age*v_max_wi*HCwithin  + age*v_entropy_wi_change*HCwithin   + rt_csv_sc*HCwithin  + iti_sc*HCwithin + outcome*HCwithin + HCbetween + (1 |id/run))
lag_sim = formula(~ vmPFC_lag + HCwithin + HC_wi_lag + HCbetween + (1|id/run))
lag_sim_beh = formula(~ vmPFC_lag + v_entropy_wi*HCwithin + v_entropy_wi*HC_wi_lag + trial_neg_inv_sc*HC_wi_lag + trial_neg_inv_sc*HCwithin +
v_max_wi*HC_wi_lag + v_max_wi*HCwithin + outcome*HC_wi_lag + outcome*HCwithin +
HCbetween + rt_csv_sc + iti_sc + outcome*HC_wi_lag  + (1|id/run))
lag_sim_age = formula(~ age*vmPFC_lag + age*HCwithin + age*HC_wi_lag + HCbetween + (1|id/run))
lag_sim_age_rs = formula(~ age*vmPFC_lag + age*HCwithin + age*HC_wi_lag + HCbetween + (vmPFC_lag + HCwithin + HC_wi_lag|id/run))
df <- df %>% group_by(id) %>% mutate(v_entropy_wi_change_lag = lag(v_entropy_wi_change), outcome_lag = lag(outcome)) %>% ungroup()
df <- df %>% group_by(id,run) %>% mutate(v_entropy_wi_change_lag = lag(v_entropy_wi_change), outcome_lag = lag(outcome)) %>% ungroup()
flist <- named_list(lag_sim_age_clock_rs)
splits <- c("network", "evt_time", "HC_region")
message("Running mixed_by")
ddf <- mixed_by(df, outcomes = "vmPFC_decon", rhs_model_formulae = flist, # "decon_mean1" renamed "HC_decon" for consistency
split_on = splits, scale_predictors = c("pe_max_lag"),
tidy_args = list(effects = c("fixed", "ran_vals", "ran_pars", "ran_coefs"), conf.int = TRUE),
calculate = c("parameter_estimates_reml"), ncores = 12, refit_on_nonconvergence = 5, padjust_by = "term",
# emtrends_spec = list(
#   abspe = list(outcome = "decon_interp", model_name = "enc_rt_int", var = "abs_pe", specs = c("outcome")))
)
df$side
flist
decode_formula[[1]] <- lag_sim_age_clock_rs
decode_formula <- formula(~ (1|id))
decode_formula[[1]] <- lag_sim_age_clock_rs
decode_formula[[1]] <- lag_sim_age_clock_rs
message("Running mixed_by")
ddf <- mixed_by(df, outcomes = "vmPFC_decon", rhs_model_formulae = decode_formula[[1]], # "decon_mean1" renamed "HC_decon" for consistency
split_on = splits, scale_predictors = c("pe_max_lag"),
tidy_args = list(effects = c("fixed", "ran_vals", "ran_pars", "ran_coefs"), conf.int = TRUE),
calculate = c("parameter_estimates_reml"), ncores = 12, refit_on_nonconvergence = 5, padjust_by = "term",
# emtrends_spec = list(
#   abspe = list(outcome = "decon_interp", model_name = "enc_rt_int", var = "abs_pe", specs = c("outcome")))
)
ddf
ddf <- mixed_by(df, outcomes = "vmPFC_decon", rhs_model_formulae = decode_formula[[1]], # "decon_mean1" renamed "HC_decon" for consistency
split_on = splits, scale_predictors = c("pe_max_lag"),
tidy_args = list(effects = c("fixed", "ran_vals", "ran_pars", "ran_coefs"), conf.int = TRUE),
calculate = c("parameter_estimates_reml"), ncores = 12, refit_on_nonconvergence = 5, padjust_by = "term",
# emtrends_spec = list(
#   abspe = list(outcome = "decon_interp", model_name = "enc_rt_int", var = "abs_pe", specs = c("outcome")))
)
ddf <- mixed_by(df, outcomes = "vmPFC_decon", rhs_model_formulae = decode_formula[[1]], # "decon_mean1" renamed "HC_decon" for consistency
split_on = splits, scale_predictors = c("pe_max_lag"),
tidy_args = list(effects = c("fixed", "ran_vals", "ran_pars", "ran_coefs"), conf.int = TRUE),
calculate = c("parameter_estimates_reml"), ncores = 12, refit_on_nonconvergence = 5, padjust_by = "term"
# emtrends_spec = list(
#   abspe = list(outcome = "decon_interp", model_name = "enc_rt_int", var = "abs_pe", specs = c("outcome")))
)
decode_formula[[1]] <- lag_sim_age_clock
ddf <- mixed_by(df, outcomes = "vmPFC_decon", rhs_model_formulae = decode_formula[[1]], # "decon_mean1" renamed "HC_decon" for consistency
split_on = splits, scale_predictors = c("pe_max_lag"),
tidy_args = list(effects = c("fixed", "ran_vals", "ran_pars", "ran_coefs"), conf.int = TRUE),
calculate = c("parameter_estimates_reml"), ncores = 12, refit_on_nonconvergence = 5, padjust_by = "term"
# emtrends_spec = list(
#   abspe = list(outcome = "decon_interp", model_name = "enc_rt_int", var = "abs_pe", specs = c("outcome")))
)
ddf <- mixed_by(df, outcomes = "vmPFC_decon", rhs_model_formulae = decode_formula[[1]], # "decon_mean1" renamed "HC_decon" for consistency
split_on = splits,
tidy_args = list(effects = c("fixed", "ran_vals", "ran_pars", "ran_coefs"), conf.int = TRUE),
calculate = c("parameter_estimates_reml"), ncores = 26, refit_on_nonconvergence = 5, padjust_by = "term"
# emtrends_spec = list(
#   abspe = list(outcome = "decon_interp", model_name = "enc_rt_int", var = "abs_pe", specs = c("outcome")))
)
ddf <- mixed_by(df, outcomes = "vmPFC_decon", rhs_model_formulae = decode_formula[[1]], # "decon_mean1" renamed "HC_decon" for consistency
split_on = splits,
tidy_args = list(effects = c("fixed", "ran_vals", "ran_pars", "ran_coefs"), conf.int = TRUE),
ncores = 26, refit_on_nonconvergence = 5, padjust_by = "term"
# emtrends_spec = list(
#   abspe = list(outcome = "decon_interp", model_name = "enc_rt_int", var = "abs_pe", specs = c("outcome")))
)
decode_formula
# similar to lag_sim_age but only for vmPFC seed and HC target
v_to_h_lag_sim_age = formula(~ age*vmPFC_lag + age*vmPFC_decon + age*HC_wi_lag + (1|id/run))
lag_sim_age = formula(~ age*vmPFC_lag + age*HCwithin + age*HC_wi_lag + HCbetween + (1|id/run))
ddf <- mixed_by(df, outcomes = "vmPFC_decon", rhs_model_formulae = decode_formula[[1]], # "decon_mean1" renamed "HC_decon" for consistency
split_on = splits,
tidy_args = list(effects = c("fixed", "ran_vals", "ran_pars", "ran_coefs"), conf.int = TRUE),
ncores = 26, refit_on_nonconvergence = 5, padjust_by = "term"
# emtrends_spec = list(
#   abspe = list(outcome = "decon_interp", model_name = "enc_rt_int", var = "abs_pe", specs = c("outcome")))
)
decode_formula <- formula(~ (1|id))
decode_formula[[1]] <- lag_sim_age
message("Running mixed_by")
ddf <- mixed_by(df, outcomes = "vmPFC_decon", rhs_model_formulae = decode_formula[[1]], # "decon_mean1" renamed "HC_decon" for consistency
split_on = splits,
tidy_args = list(effects = c("fixed", "ran_vals", "ran_pars", "ran_coefs"), conf.int = TRUE),
ncores = 26, refit_on_nonconvergence = 5, padjust_by = "term"
# emtrends_spec = list(
#   abspe = list(outcome = "decon_interp", model_name = "enc_rt_int", var = "abs_pe", specs = c("outcome")))
)
decode_formula
lag_sim_age
ddf <- mixed_by(df, outcomes = "vmPFC_decon", rhs_model_formulae = decode_formula[[1]], # "decon_mean1" renamed "HC_decon" for consistency
split_on = splits,
tidy_args = list(effects = c("fixed", "ran_vals", "ran_coefs"), conf.int = TRUE),
ncores = 26, refit_on_nonconvergence = 5, padjust_by = "term"
# emtrends_spec = list(
#   abspe = list(outcome = "decon_interp", model_name = "enc_rt_int", var = "abs_pe", specs = c("outcome")))
)
df
df <- df %>% ungroup()
df
source("/Volumes/Users/Andrew/alex_vmPFC_HC_medusa.R", echo=TRUE)
source("/Volumes/Users/Andrew/alex_vmPFC_HC_medusa.R", echo=TRUE)
df
lag_sim_age
ddf <- mixed_by(df, outcomes = "vmPFC_decon", rhs_model_formulae = decode_formula[[i]] , split_on = splits,
padjust_by = "term", padjust_method = "fdr", ncores = ncores, refit_on_nonconvergence = 3,
tidy_args = list(effects=c("fixed","ran_vals","ran_pars","ran_coefs"),conf.int=TRUE))
ddf <- mixed_by(df, outcomes = "vmPFC_decon", rhs_model_formulae = decode_formula[[1]] , split_on = splits,
padjust_by = "term", padjust_method = "fdr", ncores = ncores, refit_on_nonconvergence = 3,
tidy_args = list(effects=c("fixed","ran_vals","ran_pars","ran_coefs"),conf.int=TRUE))
ddf <- mixed_by(df, outcomes = "vmPFC_decon", rhs_model_formulae = decode_formula[[1]] , split_on = splits,
padjust_by = "term", padjust_method = "fdr", ncores = 26, refit_on_nonconvergence = 3,
tidy_args = list(effects=c("fixed","ran_vals","ran_pars","ran_coefs"),conf.int=TRUE))
file.edit(mixed_by)
df
load('/Users/dnplserv/DAN/2024-12-27-DAN-Merged.Rdata')
rt_comb$scan_which[is.na(rt_comb$scan_which)] = 'P1'
ggplot(rt_comb,aes(x=evt_time,y=decon_mean, color = scan_which, group=scan_which)) + geom_line() + facet_wrap(~id)
library(tidyverse)
ggplot(rt_comb,aes(x=evt_time,y=decon_mean, color = scan_which, group=scan_which)) + geom_line() + facet_wrap(~id)
rt <- rt_comb %>% group_by(evt_time,id) %>% summarize(mD = mean(decon_mean,na.rm=TRUE)) %>% ungroup()
rt
rt <- rt_comb %>% group_by(evt_time,id,scan_which) %>% summarize(mD = mean(decon_mean,na.rm=TRUE)) %>% ungroup()
rt
ggplot(rt,aes(x=evt_time,y=mD, color = scan_which, group=scan_which)) + geom_line() + facet_wrap(~id)
table(rt$scan_which)
scanner <- rt_comb %>% group_by(id,scan_which) %>% summarize(mD = mean(decon_mean,na.rm=TRUE)) %>% ungroup()
table(scanner$scan_which)
rt <- rt_comb %>% group_by(evt_time,id,scan_which) %>% summarize(mD = mean(decon_mean,na.rm=TRUE), peak=which(max(mD,na.rm=TRUE)) %>% ungroup()
rt <- rt_comb %>% group_by(evt_time,id,scan_which) %>% summarize(mD = mean(decon_mean,na.rm=TRUE), peak=which(max(mD,na.rm=TRUE))) %>% ungroup()
rt <- rt_comb %>% group_by(evt_time,id,scan_which) %>% summarize(mD = mean(decon_mean,na.rm=TRUE)) %>% ungroup()
rt <- rt %>% mutate(peak = max(mD, na.rm=TRUE), ipeak = which(max(mD,na.rm=TRUE)))
rt <- rt %>% mutate(peak = max(mD, na.rm=TRUE), ipeak = which(mD==max(mD,na.rm=TRUE)))
table(rt$scan_which,rt$ipeak)
rt$ipeak
plot(rt$ipeak)
rt <- rt %>% group_by(id) %>% mutate(peak = max(mD, na.rm=TRUE), ipeak = which(mD==max(mD,na.rm=TRUE)))
rt <- rt %>% group_by(id) %>% mutate(peak = max(mD, na.rm=TRUE), ipeak = which(mD==max(mD,na.rm=TRUE))) %>% ungroup()
plot(rt$ipeak)
table(rt$scan_which,rt$ipeak)
table(rt$scan_which,rt$peak)
table(rt$scan_which,rt$ipeak)
rt <- rt %>% group_by(id) %>% arrange(evt_time) %>% mutate(peak = max(mD, na.rm=TRUE), ipeak = which(mD==max(mD,na.rm=TRUE))) %>% ungroup()
table(rt$scan_which,rt$ipeak)
rt <- rt %>% group_by(id) %>% arrange(evt_time) %>% mutate(peak = max(mD, na.rm=TRUE), ipeak = which(evt_time==max(mD,na.rm=TRUE))) %>% ungroup()
rt <- rt %>% group_by(id) %>% arrange(evt_time) %>% mutate(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE])) %>% ungroup()
rt <- rt %>% group_by(id) %>% arrange(evt_time) %>% mutate(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE)]) %>% ungroup()
table(rt$scan_which,rt$ipeak)
rt
table(rt$ipeak)
table(rt$ipeak,rt$scan_which)
peak = rt %>% group_by(id) %>% summarize(ipeak = mode(ipeak)) %>% ungroup()
peak = rt %>% group_by(id,scan_which) %>% summarize(ipeak = mode(ipeak)) %>% ungroup()
peak
peak = rt %>% group_by(id,scan_which) %>% summarize(ipeak = median(ipeak)) %>% ungroup()
peak
peak = rt %>% group_by(id,scan_which) %>% summarize(ipeak = mode(ipeak)) %>% ungroup()
peak
peak = rt %>% group_by(id,scan_which) %>% summarize(ipeak = mean(ipeak)) %>% ungroup()
peak
table(peak$scan_which,peak$ipeak)
source('/Users/dnplserv/clock_analysis/fmri/keuka_brain_behavior_analyses/dan/get_trial_data.R')
df <- get_trial_data(repo_directory='~/clock_analysis',dataset='bsocial')
df <- get_trial_data(repo_directory='~/clock_analysis',dataset='bsocial')
df <- read_csv('/Volumes/Users/Andrew/DAN/bsocial_clock_trial_df.csv')
library(stringr)
library(fmri.pipeline)
library(tidyverse)
library(pracma)
PPCcaudal <- c('280','281','282','275','277','73','75','77','78','80','81','82')
# load Explore
rt_exp <- read.csv('/Volumes/Users/Andrew/DAN/Explore_rt_aligned_444_dan.csv.gz')
gc()
PPCcaudal <- c('280','281','282','275','277','73','75','77','78','80','81','82')
# load Explore
rt_exp <- read.csv('/Volumes/Users/Andrew/DAN/feedback_aligned_bsocial_dan_and_v1.csv.gz')
rt_exp <- rt_exp %>% select(id,run,trial,evt_time,decon_mean, atlas_value)
df <- read_csv('/Volumes/Users/Andrew/DAN/bsocial_clock_trial_df.csv')
df <- df %>% select(id,run,trial,iti_prev,rt_csv)
df$id <- as.integer(df$id)
rt_exp <- rt_exp %>% mutate(run0 = as.numeric(gsub("run", "", run))) %>% select(!run) %>% rename(run = run0)
rt_exp <- inner_join(df,rt_exp,by=c('id','run','trial'))
unique(df$id)
unique(rt_exp$id)
colnames(rt_exp)
rt <- rt %>% group_by(id) %>% arrange(evt_time) %>% mutate(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE)]) %>% ungroup()
library(tidyverse)
rt <- rt %>% group_by(id) %>% arrange(evt_time) %>% mutate(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE)]) %>% ungroup()
rt <- rt_exp %>% group_by(evt_time,id,scan_which) %>% summarize(mD = mean(decon_mean,na.rm=TRUE)) %>% ungroup()
rt <- rt_exp %>% group_by(evt_time,id) %>% summarize(mD = mean(decon_mean,na.rm=TRUE)) %>% ungroup()
ggplot(rt_comb,aes(x=evt_time,y=decon_mean)) + geom_line() + facet_wrap(~id)
ggplot(rt,aes(x=evt_time,y=decon_mean)) + geom_line() + facet_wrap(~id)
ggplot(rt,aes(x=evt_time,y=mD)) + geom_line() + facet_wrap(~id)
colnames(rt)
rt
print(rt,n=10000)
ggplot(rt,aes(x=evt_time,y=mD)) + geom_line() + facet_wrap(~id)
unique(rt_exp$atlas_value)
PPCcaudal <- c('280','281','282','275','277','73','75','77','78','80','81','82')
rt <- rt_exp %>% filter(atlas_value %in% PPCcaudal) %>% group_by(evt_time,id) %>% summarize(mD = mean(decon_mean,na.rm=TRUE)) %>% ungroup()
ggplot(rt,aes(x=evt_time,y=mD)) + geom_line() + facet_wrap(~id,scales='free_y')
rt <- rt %>% group_by(id) %>% arrange(evt_time) %>% mutate(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE)]) %>% ungroup()
table(rt)
rt
rt <- rt_exp %>% filter(atlas_value %in% PPCcaudal) %>% group_by(evt_time,id) %>% summarize(mD = mean(decon_mean,na.rm=TRUE)) %>% ungroup()
rt <- rt %>% group_by(id) %>% arrange(evt_time) %>% mutate(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE)]) %>% ungroup()
rt
rt <- rt_exp %>% filter(atlas_value %in% PPCcaudal) %>% group_by(evt_time,id) %>% summarize(mD = mean(decon_mean,na.rm=TRUE)) %>% ungroup()
test <- rt %>% group_by(id) %>% summarize(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE)]) %>% ungroup()
test
peak = test %>% group_by(id) %>% summarize(ipeak = mean(ipeak)) %>% ungroup()
peak
table(peak$ipeak)
table(peak$ipeak)
V1 <- c('7','207')
rt <- rt_exp %>% filter(atlas_value %in% V1) %>% group_by(evt_time,id) %>% summarize(mD = mean(decon_mean,na.rm=TRUE)) %>% ungroup()
ggplot(rt,aes(x=evt_time,y=mD)) + geom_line() + facet_wrap(~id,scales='free_y')
test <- rt %>% group_by(id) %>% summarize(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE)]) %>% ungroup()
peak = test %>% group_by(id) %>% summarize(ipeak = mean(ipeak)) %>% ungroup()
table(peak)
test <- rt %>% group_by(id) %>% summarize(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE)]) %>% ungroup()
peak = test %>% group_by(id) %>% summarize(ipeak = mean(ipeak)) %>% ungroup()
oeaj
peak
table(peak)
peak = test %>% group_by(id) %>% summarize(ipeak = mean(ipeak)) %>% ungroup()
rm(peak)
peak = test %>% group_by(id) %>% summarize(ipeak = mean(ipeak)) %>% ungroup()
peak
table(peak$ipeak
)
)
table(peak$ipeak)
table(peak$ipeak)
colnames(rt_exp)
rt_exp %>% group_by(id,run) %>% mutate(early_trials = case_when(trial < 10,))
rt_exp %>% group_by(id,run) %>% mutate(early_trials = case_when(trial < 60 ~ 'early',trial >= 60, 'late')) %>% ungroup()
rt_exp %>% group_by(id,run) %>% mutate(early_trials = case_when(trial < 60 ~ 'early',trial >= 60 ~ 'late')) %>% ungroup()
rt <- rt %>% group_by(id,run,early_trials) %>% arrange(evt_time) %>% mutate(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE)]) %>% ungroup()
rt <- rt_exp %>% group_by(id,run,early_trials) %>% arrange(evt_time) %>% summarize(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE)]) %>% ungroup()
rt <- rt_exp %>% group_by(id,run,early_trials) %>% arrange(evt_time) %>% summarize(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE)]) %>% ungroup()
rt_exp <- rt_exp %>% group_by(id,run) %>% mutate(early_trials = case_when(trial < 60 ~ 'early',trial >= 60 ~ 'late')) %>% ungroup()
rt <- rt_exp %>% group_by(id,run,early_trials) %>% arrange(evt_time) %>% summarize(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE)]) %>% ungroup()
rt <- rt_exp %>% filter(atlas_value %in% V1) %>% group_by(evt_time,id,run,early_trials) %>% summarize(mD = mean(decon_mean,na.rm=TRUE)) %>% ungroup()
test <- rt %>% group_by(id) %>% summarize(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE)]) %>% ungroup()
test <- rt %>% group_by(id,run,early_trials) %>% summarize(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE)]) %>% ungroup()
peak = test %>% group_by(id,run,early_trials) %>% summarize(ipeak = mean(ipeak)) %>% ungroup()
table(peak$ipeak)
table(peak$ipeak,peak$run)
table(peak$ipeak,peak$early_trials)
rt <- rt_exp %>% filter(atlas_value %in% PPCcaudal) %>% group_by(evt_time,id,run,early_trials) %>% summarize(mD = mean(decon_mean,na.rm=TRUE)) %>% ungroup()
test <- rt %>% group_by(id,run,early_trials) %>% summarize(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE)]) %>% ungroup()
peak = test %>% group_by(id,run,early_trials) %>% summarize(ipeak = mean(ipeak)) %>% ungroup()
table(peak$ipeak,peak$early_trials)
table(peak$ipeak,peak$early_trials,peak$run)
rt_exp <- rt_exp %>% group_by(id,run) %>% mutate(early_trials = case_when((trial < 60 & trial < 120) | (trial >= 120 & trial < 180) ~ 'early',(trial >= 60 & trial <= 120) | (trial >180 & trial <=240) ~ 'late')) %>% ungroup()
rt <- rt %>% group_by(id,run,early_trials) %>% arrange(evt_time) %>% mutate(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE)]) %>% ungroup()
test <- rt %>% group_by(id,run,early_trials) %>% summarize(peak = max(mD, na.rm=TRUE), ipeak = evt_time[mD==max(mD,na.rm=TRUE)]) %>% ungroup()
peak = test %>% group_by(id,run,early_trials) %>% summarize(ipeak = mean(ipeak)) %>% ungroup()
peak
table(peak$ipeak)
table(peak$ipeak,peak$run)
table(peak$ipeak,peak$early_trials)
table(peak$ipeak,peak$early_trials,peak$run)
unique(rt_exp$trial)
unique(df$trial)
# load Explore
rt_exp <- read.csv('/Volumes/Users/Andrew/DAN/feedback_aligned_bsocial_dan_and_v1.csv.gz')
unique(rt_exp$trial)
colnames(rt_exp)
sum(is.na(rt_exp$trial))
table(rt_exp$trial, rt_exp$run)
unique(rt_exp$run)
table(rt_exp$id,rt_exp$run)
table(rt_exp$id,rt_exp$trial)
unique(df$trial)
gc()
rt_bsoc <- read_csv('/Volumes/Users/Andrew/DAN/clock_aligned_bsocial_dan_and_v1.csv.gz')
unique(rt_bsoc$trial)
rt_bsoc <- read.csv('/Volumes/Users/Andrew/DAN/clock_aligned_bsocial_dan_and_v1.csv.gz')
gc()
df <- read_csv('/Volumes/Users/Andrew/feedback_aligned_bsocial_vmPFC.csv.gz')
df <- read.csv('/Volumes/Users/Andrew/feedback_aligned_bsocial_vmPFC.csv.gz')
unique(df$trial)
library(tidyverse)
df <- read_csv('/Volumes/Users/Andrew/all_processed_data_2024-01-09.csv')
df <- df %>% filter(trialcode == 'feedback')
colnames(df)
hist(df$inc_rg)
hist(df$inc_rg,bins=30)
unique(df$subject)
unique(df$inc_rg == 10)
sum(df$inc_rg == 10)
sum(!is.na(df$inc_rg == 10))
df$inc_rg
unique(df$trial)
df$inc_rg
ggplot(df, aes(x=inc_rg)) + geom_histogram(bins=20)
ggplot(df, aes(x=inc_rg)) + geom_histogram(bins=20)
ggplot(df, aes(x=inc_rg)) + geom_histogram(bins=20) + xlab('Points / trial')
sum(!is.na(df$inc_rg == 10))/23520
sum(df$inc_rg > 10)
df <- df %>% filter(inc_rg != 'NA')
sum(df$inc_rg > 10)
ggplot(df, aes(x=inc_rg)) + geom_histogram(bins=20) + xlab('Points / trial')
table(df$subject,df$totalEarnings)
totalEarnings <- df %>% group_by(subject) %>% summarize(mE = max(totalEarnings,na.rm=TRUE)) %>% ungroup()
totalEarnings
View(totalEarnings)
hist(totalEarnings)
hist(totalEarnings$mE)
hist(as.numeric(totalEarnings$mE))
ggplot(totalEarnings,aes(x=mE)) + geom_histogram(bins=10) + xlab('total Earnings ($)')
ggplot(totalEarnings,aes(x=as.numeric(mE))) + geom_histogram(bins=10) + xlab('total Earnings ($)')
ggplot(totalEarnings,aes(x=as.numeric(mE))) + geom_histogram(bins=20) + xlab('total Earnings ($)')
setwd('~/vmPFC')
file.edit('timing_test_DAN_MMClock_Explore.R')
source("~/vmPFC/timing_V1_Explore.R", echo=TRUE)
source("~/vmPFC/timing_V1_Explore.R", echo=TRUE)
rt_exp$scan_which
scaninfo
rt_exp <- inner_join(rt_exp,scaninfo,by='id')
unique(rt_exp$scan_which.x)
unique(rt_exp$scan_which.y)
nique(scaninfo$id)
unique(scaninfo$id)
unique(rt_exp$id)
gc()
#PPCcaudal <- c('280','281','282','275','277','73','75','77','78','80','81','82')
V1 <- c('4','7','5','9','11','204','206','202','209','211')
# load Explore
rt_exp <- read.csv('/Volumes/Users/Andrew/DAN/Explore_rt_aligned_444_dan.csv.gz')
colnames(rt_exp)
unique(rt_exp$atlas_value)
PPCcaudal <- c('280','281','282','275','277','73','75','77','78','80','81','82')
rt_exp <- rt_exp %>% filter(atlas_value %in% PPCcaudal) %>%
select(id,run,trial,evt_time,decon_mean, atlas_value)
source('/Users/dnplserv/clock_analysis/fmri/keuka_brain_behavior_analyses/dan/get_trial_data.R')
df <- get_trial_data(repo_directory='~/clock_analysis',dataset='explore')
df <- df %>% select(id,run,trial,iti_prev,rt_csv)
df$id <- as.integer(df$id)
rt_exp <- rt_exp %>% mutate(run0 = as.numeric(gsub("run", "", run))) %>% select(!run) %>% rename(run = run0)
rt_exp <- inner_join(df,rt_exp,by=c('id','run','trial'))
rt_exp <- rt_exp %>% mutate(run_trial = case_when(trial <= 40 ~ trial,
trial > 40 & trial <= 80 ~ trial-40,
trial > 80 & trial <=120 ~ trial-80,
trial > 120 & trial <=160 ~ trial-120,
trial > 160 & trial <=200 ~ trial-160,
trial > 200 & trial <=240 ~ trial-200))
rt_exp <- rt_exp %>% select(!trial)
scaninfo <- read_csv('/Volumes/Users/Andrew/v18-2024-12-04/HC_vPFC_Explore_Clock_Scanner_Dates.csv')
scaninfo <- scaninfo %>% mutate(id = registration_redcapid, ddate = as.vector(t(scale(difftime(scaninfo$scan_date,min(scaninfo$scan_date)))))) %>% select(!registration_redcapid)
rt_exp <- inner_join(rt_exp,scaninfo,by='id')
rt_exp$scan_which <- relevel(as.factor(rt_exp$scan_which),ref='P1')
rt_exp <- rt_exp %>% mutate(experiment = 'Explore')
rt_exp$scan_which[is.na(rt_exp$scan_which)] = 'P1'
