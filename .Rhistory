getwd()
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/Subjects/32765/physio/32765_physio_raw.rdata")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_raw.rdata")
View(physio_concat_new)
df = dplyr::as_tibble(physio_concat_new)
df = dplyr::as_tibble(physio_concat_new$eeg)
View(df)
df$recording_time[1]
df$recording_time[2]
format(df$recording_time[1], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[2], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[2000], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[200000], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[200000000], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[20000000000], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[20000000000000], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[20000000000000], scientific=F)
df$recording_time[200000000]
length(df$recording_time)
19905478 < 200000000
format(df$recording_time[1], scientific=F) == format(df$recording_time[19905478], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[19905478], scientific=F)
df$recording_time[19905478]
df$recording_time[1]
df2 = dplyr::as_tibble(physio_concat_new$ecg)
View(df2)
format(df2$recording_time[1], scientific=F) == format(df2$recording_time[2], scientific=F)
format(df2$time_ms[1], scientific=F) == format(df2$time_ms[2], scientific=F)
length(df2$time_ms)
format(df2$time_ms[1], scientific=F) == format(df2$time_ms[89574], scientific=F)
EEG = dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse ORDER BY recording_time ASC")
EEG = RSQlite::dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse ORDER BY recording_time ASC")
EEG = RSQLite::dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse ORDER BY recording_time ASC")
EEG = RSQLite::dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
EEGd = RSQLite::dbGetQuery(EEG, "SELECT * FROM EEG_muse ORDER BY recording_time ASC")
EEG = RSQLite::dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
library(RSQLite)
EEG = dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse ORDER BY recording_time ASC")
View(EEGd)
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse")
View(EEGd)
EEGd = dbGetQuery(EEG, "SELECT datetime(recording_time, 'unixepoch', 'localtime') FROM EEG_muse")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse WHERE date(recording_time / 1000,'unixepoch')")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220208120617.db")
View(physio_concat_new)
df_4_ecg = dplyr::as_tibble(physio_concat_new$ecg)
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220208120617.db")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220208121147.db")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220212053820.db")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220212053820.db")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220212053820.db")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440197/physio/440197_physio_20211102175806.db")
load("")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/540010/physio/540010_physio_20211209160500.db")
readRDS("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220208120617.db")
library(RSQLite)
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_raw.rdata")
df = dplyr::as_tibble(physio_concat_new)
df = dplyr::as_tibble(physio_concat_new$eeg)
View(df)
EEG = dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220208120617.db")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse")
View(EEGd)
format(df$recording_time[1], scientific=F) == format(df$recording_time[2], scientific=F)
length(df$recording_time)
format(df$recording_time[1], scientific=F) == format(df$recording_time[12311195], scientific=F)
EEGd$recording_time
EEGd$recording_time[1]
physio_concat_new$eeg$recording_time
physio_concat_new$eeg$recording_time[1]
as.double(physio_concat_new$eeg$recording_time[1])
fbt
EEGd = dbGetQuery(EEG, 'SELECT * FROM EEG_muse Where printf("%f", recording_time)')
View(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time) FROM EEG_muse')
View(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT * FROM EEG_muse WHERE recording_time=printf("%f", recording_time)')
EEGd = dbGetQuery(EEG, 'SELECT * FROM EEG_muse WHERE recording_time=printf("%f", recording_time)')
View(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT recording_time=printf("%f", recording_time) FROM EEG_muse')
View(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time),* FROM EEG_muse')
#shane come back
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time) FROM EEG_muse')
EEGd
view(EEGd)
View(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT quote(recording_time) FROM EEG_muse')
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time) FROM EEG_muse')
colnames(EEGd)
d <- colnames(EEGd)
names(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time), * FROM EEG_muse')
EEGd$recording_time[1]==EEGd$`printf("%f", recording_time)`[1]
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time), * FROM EEG_muse')
EEGd
install.packages("ggplot2")
# load the DataTracker
library(DataTracker)
# set our backup location
BACKUP_PATH = '/Volumes/bierka_root/datamesh/RAW/REDCap_backups'
backup_redcap(cfg=lab.cfg(), protocol='pandea',
out_dir=paste0(BACKUP_PATH, '/pandea'),
include_timestamp=TRUE)
cfg=lab.cfg()
# load the DataTracker
library(DataTracker)
# set our backup location
BACKUP_PATH = '/Volumes/bierka_root/datamesh/RAW/REDCap_backups'
# update the configuration json file
fetch_datatracker_cfg(repo="Lab_Configs",
path="datatracker/lab_cfg.json",
gh_root="DecisionNeurosciencePsychopathology")
source("~/Desktop/cron_scripts/redcap_backups.R", echo=TRUE)
load("~/vmPFC/MEDUSA Schaefer Analysis/vmPFC_HC_model_selection/2022-05-11-vmPFC-HC-symmetry-feedback-1.Rdata")
ddf <- ddf$coef_df_reml
ddf$symmetry_group
ddq <- ddf %>% filter(effect == 'fixed')
library(tidyverse)
ddq <- ddf %>% filter(effect == 'fixed')
ddq
ddq <- ddf %>% filter(effect == 'fixed' && term == 'HCwithin')
ddq <- ddf %>% filter(effect == 'fixed' && term == HCwithin)
ddq <- ddf %>% filter(effect == 'fixed' && term == 'HCwithin')
unique(ddf$term)
ddf$rhs[[1]]
ddq <- ddf %>% filter(effect == 'fixed' && term == "HCwithin")
ddq <- ddf %>% filter(term == "HCwithin")
ddq
ddq <- ddf %>% filter(term == "HCwithin" && effect=='fixed')
ddq <- ddf %>% filter(term == "HCwithin" && effect==fixed)
ddf$effect=='fixed'
term[ddf$effect=='fixed']
unique(ddf$term[effect=='fixed'])
unique(ddf$term[ddf$effect=='fixed'])
ddq <- ddf %>% filter(term == "HCwithin" & effect==fixed)
ddq <- ddf %>% filter(term == "HCwithin" & effect=='fixed')
ddq
ddq1 <- ddq %>% group_by(symmetry_group) %>% summarize(estimate) %>% ungroup()
ddq1
ddq1 <- ddq %>% group_by(symmetry_group, HC_region) %>% summarize(estimate) %>% ungroup()
ddq1
View(ddq1)
ddq1 <- ddq %>% group_by(symmetry_group, HC_region) %>% summarize(estimate = mean(estimate,na.rm=TRUE)) %>% ungroup()
ddq1 <- ddq %>% group_by(symmetry_group, HC_region) %>% summarize(estimate = log10(mean(estimate,na.rm=TRUE))) %>% ungroup()
ddq1 <- ddq %>% group_by(symmetry_group, HC_region) %>% summarize(estimate = mean(estimate,na.rm=TRUE)) %>% ungroup()
library(stringr)
library(pracma)
library(wesanderson)
library(tidyverse)
# start with vmPFC simple, add in term by term, eventually add HC interaction
repo_directory <- "~/clock_analysis"
HC_cache_dir = '~/vmPFC/MEDUSA Schaefer Analysis'
vmPFC_cache_dir = '~/vmPFC/MEDUSA Schaefer Analysis'
message("Loading vmPFC medusa data from cache: ", vmPFC_cache_dir)
load(file.path(vmPFC_cache_dir,  'feedback_vmPFC_Schaefer_tall_ts_1.Rdata'))
vmPFC <- fb_comb
vmPFC <- vmPFC %>% filter(evt_time > -6 & evt_time < 6)
rm(fb_comb)
vmPFC <- vmPFC %>% select(id,run,run_trial,decon_mean,atlas_value,evt_time,region,symmetry_group,network)
vmPFC <- vmPFC %>% rename(vmPFC_decon = decon_mean)
source('~/vmPFC/get_trial_data_vmPFC.R')
df <- get_trial_data_vmPFC(repo_directory=repo_directory,dataset='mmclock_fmri')
df <- df %>%
group_by(id, run) %>%
mutate(iti_lag = lag(iti_ideal), rt_sec = rt_csv/1000) %>% ungroup() %>%
mutate(v_chosen_sc = scale(v_chosen),
abs_pe_max_sc = scale(abs(pe_max)),
pe_max_sc = scale(pe_max),
pe_max_lag_sc = scale(lag(pe_max)),
abs_pe_max_lag_sc = scale(abs(pe_max_lag)),
rt_vmax_sc = scale(rt_vmax),
v_entropy_sc = scale(v_entropy),
v_entropy_wi_change_lag = lag(v_entropy_wi_change),
rt_vmax_change_sc = scale(rt_vmax_change)) %>% arrange(id, run, run_trial) %>% mutate(log10kld3 = case_when(
kld3 ==0 ~ NA_real_,
kld3 >0 ~ log10(kld3)
)) %>% mutate(log10kld3_lag = case_when(
kld3_lag==0 ~NA_real_,
kld3_lag>0 ~ log10(kld3_lag)
))
df <- df %>% group_by(id,run) %>% mutate(expl_longer =(case_when(
rt_csv - rt_lag > 1 ~ 'Longer',
rt_csv - rt_lag < -1 ~ '0',
rt_csv - rt_lag < 1 & rt_csv - rt_lag > -1 ~ '0'
)))
df <- df %>% group_by(id,run) %>% mutate(expl_shorter =(case_when(
rt_csv - rt_lag > 1 ~ '0',
rt_csv - rt_lag < -1 ~ 'Shorter',
rt_csv - rt_lag < 1 & rt_csv - rt_lag > -1 ~ '0'
)))
library(stringr)
library(pracma)
library(wesanderson)
library(tidyverse)
# start with vmPFC simple, add in term by term, eventually add HC interaction
repo_directory <- "~/clock_analysis"
HC_cache_dir = '~/vmPFC/MEDUSA Schaefer Analysis'
vmPFC_cache_dir = '~/vmPFC/MEDUSA Schaefer Analysis'
message("Loading vmPFC medusa data from cache: ", vmPFC_cache_dir)
load(file.path(vmPFC_cache_dir,  'feedback_vmPFC_Schaefer_tall_ts_1.Rdata'))
vmPFC <- fb_comb
vmPFC <- vmPFC %>% filter(evt_time > -6 & evt_time < 6)
rm(fb_comb)
vmPFC <- vmPFC %>% select(id,run,run_trial,decon_mean,atlas_value,evt_time,region,symmetry_group,network)
vmPFC <- vmPFC %>% rename(vmPFC_decon = decon_mean)
source('~/vmPFC/get_trial_data_vmPFC.R')
df <- get_trial_data_vmPFC(repo_directory=repo_directory,dataset='mmclock_fmri')
install.packages("parallelly")
source('~/vmPFC/get_trial_data_vmPFC.R')
df <- get_trial_data_vmPFC(repo_directory=repo_directory,dataset='mmclock_fmri')
source('~/vmPFC/get_trial_data_vmPFC.R')
df <- get_trial_data_vmPFC(repo_directory=repo_directory,dataset='mmclock_fmri')
source('~/vmPFC/get_trial_data_vmPFC.R')
df <- get_trial_data_vmPFC(repo_directory=repo_directory,dataset='mmclock_fmri')
uninstall.packages('ggplot2')
uninstall.package('ggplot2')
remove.packages('ggplot2')
install.packages('ggplot2')
install.packages("ggplot2")
remove.packages('ggplot2')
setwd('~/rl_ema_monitoring/')
source("~/rl_ema_monitoring/ema_runner_testing.R", echo=TRUE)
source("~/rl_ema_monitoring/ema_runner_testing.R", echo=TRUE)
setwd('~/rl_ema_monitoring/')
source("~/rl_ema_monitoring/ema_runner_testing.R", echo=TRUE)
load('/Users/dnplserv/vmPFC/MEDUSA Schaefer Analysis/vmPFC_HC_model_selection/2023-01-24-vmPFC-HC-network-clock-3.Rdata')
ddf$coef_df_reml$rhs[1]
setwd('~/vmPFC')
message('adding HC signals to models...')
load(file.path(HC_cache_dir,'clock_hipp_tall_ts_1.Rdata'))
hc <- clock_comb
hc <- hc %>% filter(evt_time > -5 & evt_time < 5)
rm(clock_comb)
setwd('~/vmPFC')
load(file.path(HC_cache_dir,'clock_hipp_tall_ts_1.Rdata'))
HC_cache_dir = '~/vmPFC/MEDUSA Schaefer Analysis'
load(file.path(HC_cache_dir,'clock_hipp_tall_ts_1.Rdata'))
colnames(clock_comb)
clock_comb
