View(df)
df$recording_time[1]
df$recording_time[2]
format(df$recording_time[1], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[2], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[2000], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[200000], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[200000000], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[20000000000], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[20000000000000], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[20000000000000], scientific=F)
df$recording_time[200000000]
length(df$recording_time)
19905478 < 200000000
format(df$recording_time[1], scientific=F) == format(df$recording_time[19905478], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[19905478], scientific=F)
df$recording_time[19905478]
df$recording_time[1]
df2 = dplyr::as_tibble(physio_concat_new$ecg)
View(df2)
format(df2$recording_time[1], scientific=F) == format(df2$recording_time[2], scientific=F)
format(df2$time_ms[1], scientific=F) == format(df2$time_ms[2], scientific=F)
length(df2$time_ms)
format(df2$time_ms[1], scientific=F) == format(df2$time_ms[89574], scientific=F)
EEG = dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse ORDER BY recording_time ASC")
EEG = RSQlite::dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse ORDER BY recording_time ASC")
EEG = RSQLite::dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse ORDER BY recording_time ASC")
EEG = RSQLite::dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
EEGd = RSQLite::dbGetQuery(EEG, "SELECT * FROM EEG_muse ORDER BY recording_time ASC")
EEG = RSQLite::dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
library(RSQLite)
EEG = dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse ORDER BY recording_time ASC")
View(EEGd)
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse")
View(EEGd)
EEGd = dbGetQuery(EEG, "SELECT datetime(recording_time, 'unixepoch', 'localtime') FROM EEG_muse")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse WHERE date(recording_time / 1000,'unixepoch')")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220208120617.db")
View(physio_concat_new)
df_4_ecg = dplyr::as_tibble(physio_concat_new$ecg)
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220208120617.db")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220208121147.db")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220212053820.db")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220212053820.db")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220212053820.db")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440197/physio/440197_physio_20211102175806.db")
load("")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/540010/physio/540010_physio_20211209160500.db")
readRDS("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220208120617.db")
library(RSQLite)
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_raw.rdata")
df = dplyr::as_tibble(physio_concat_new)
df = dplyr::as_tibble(physio_concat_new$eeg)
View(df)
EEG = dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220208120617.db")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse")
View(EEGd)
format(df$recording_time[1], scientific=F) == format(df$recording_time[2], scientific=F)
length(df$recording_time)
format(df$recording_time[1], scientific=F) == format(df$recording_time[12311195], scientific=F)
EEGd$recording_time
EEGd$recording_time[1]
physio_concat_new$eeg$recording_time
physio_concat_new$eeg$recording_time[1]
as.double(physio_concat_new$eeg$recording_time[1])
fbt
EEGd = dbGetQuery(EEG, 'SELECT * FROM EEG_muse Where printf("%f", recording_time)')
View(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time) FROM EEG_muse')
View(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT * FROM EEG_muse WHERE recording_time=printf("%f", recording_time)')
EEGd = dbGetQuery(EEG, 'SELECT * FROM EEG_muse WHERE recording_time=printf("%f", recording_time)')
View(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT recording_time=printf("%f", recording_time) FROM EEG_muse')
View(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time),* FROM EEG_muse')
#shane come back
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time) FROM EEG_muse')
EEGd
view(EEGd)
View(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT quote(recording_time) FROM EEG_muse')
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time) FROM EEG_muse')
colnames(EEGd)
d <- colnames(EEGd)
names(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time), * FROM EEG_muse')
EEGd$recording_time[1]==EEGd$`printf("%f", recording_time)`[1]
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time), * FROM EEG_muse')
EEGd
library(stringr)
library(pracma)
library(wesanderson)
library(tidyverse)
# start with vmPFC simple, add in term by term, eventually add HC interaction
repo_directory <- "~/clock_analysis"
HC_cache_dir = '~/vmPFC/MEDUSA Schaefer Analysis'
vmPFC_cache_dir = '~/vmPFC/MEDUSA Schaefer Analysis'
ncores <- 26
for (i in 1){
setwd('~/vmPFC/MEDUSA Schaefer Analysis/vmPFC_HC_model_selection')
df0 <- decode_formula[[i]]
print(df0)
qH <- quantile(df$v_entropy_wi,c(0.1,0.9),na.rm=TRUE)
qT <- quantile(df$trial_neg_inv_sc,c(0.1,0.9),na.rm=TRUE)
qV <- quantile(df$v_max_wi,c(0.1,0.9),na.rm=TRUE)
qPE = quantile(df$pe_max_sc,c(0.1,0.9),na.rm=TRUE)
ddf <- mixed_by(Q, outcomes = "vmPFC_decon", rhs_model_formulae = df0 , split_on = splits,
padjust_by = "term", padjust_method = "fdr", ncores = ncores, refit_on_nonconvergence = 3,
tidy_args = list(effects=c("fixed","ran_vals","ran_pars","ran_coefs"),conf.int=TRUE),
emtrends_spec = list(
H_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c("v_entropy_wi"), at = list(v_entropy_wi=c(qH))),
T_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c("trial_neg_inv_sc"), at = list(trial_neg_inv_sc=c(qT))),
V_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('v_max_wi'), at=list(v_max_wi=c(qV))),
PE_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('pe_max_sc'), at=list(pe_max_sc=c(qPE)))
)
)
curr_date <- strftime(Sys.time(),format='%Y-%m-%d')
save(ddf,file=paste0(curr_date,'-vmPFC-HC-network-feedback-',i,'.Rdata'))
}
###################################
##### vmPFC - HC -feedback    #####
###################################
rm(Q)
message("Loading vmPFC medusa data from cache: ", vmPFC_cache_dir)
load(file.path(vmPFC_cache_dir,  'feedback_vmPFC_Schaefer_tall_ts_1.Rdata'))
vmPFC <- fb_comb
vmPFC <- vmPFC %>% filter(evt_time > -6 & evt_time < 6)
rm(fb_comb)
vmPFC <- vmPFC %>% select(id,run,run_trial,decon_mean,atlas_value,evt_time,region,symmetry_group,network)
vmPFC <- vmPFC %>% rename(vmPFC_decon = decon_mean)
load(file.path(HC_cache_dir,'feedback_hipp_tall_ts_1.Rdata'))
hc <- fb_comb
hc <- hc %>% filter(evt_time > -6 & evt_time < 6)
rm(fb_comb)
hc <- hc %>% mutate(
HC_region = case_when(
bin_num <= 8 ~ 'AH',
bin_num >8 ~ 'PH'
),
)
hc <- hc %>% group_by(id,run,run_trial,evt_time,HC_region) %>% summarize(decon1 = mean(decon_mean,na.rm=TRUE)) %>% ungroup() # 12 -> 2
hc <- hc %>% group_by(id,run) %>% mutate(HCwithin = scale(decon1),HCbetween=mean(decon1,na.rm=TRUE)) %>% ungroup()
Q <- merge(vmPFC,hc,by=c("id","run","run_trial","evt_time"))
Q <- Q %>% select(!decon1)
source('~/vmPFC/get_trial_data_vmPFC.R')
df <- get_trial_data(repo_directory=repo_directory,dataset='mmclock_fmri')
df <- df %>% select(trial,v_max,v_entropy,rt_lag,v_entropy_full,v_entropy_wi_full,rt_vmax_full,rt_vmax_change_full,rt_csv_sc,rt_csv,id, run, run_trial, last_outcome, trial_neg_inv_sc,pe_max, rt_vmax, score_csv,
v_max_wi, v_entropy_wi,kld3,rt_change,total_earnings, rewFunc,rt_csv, pe_max,v_chosen,rewFunc,iti_ideal,
rt_vmax_lag_sc,rt_vmax_change,outcome,pe_max,kld3_lag,rt_lag_sc,rt_next,v_entropy_wi_change,pe_max_lag) %>%
group_by(id, run) %>%
mutate(iti_lag = lag(iti_ideal), rt_sec = rt_csv/1000) %>% ungroup() %>%
mutate(v_chosen_sc = scale(v_chosen),
abs_pe_max_sc = scale(abs(pe_max)),
abs_pe_max_lag_sc = scale(abs(pe_max_lag)),
pe_max_sc = scale(pe_max),
pe_max_lag_sc = scale(lag(pe_max)),
rt_vmax_sc = scale(rt_vmax),
v_entropy_sc = scale(v_entropy),
rt_vmax_change_sc = scale(rt_vmax_change)) %>% arrange(id, run, run_trial) %>% mutate(log10kld3 = case_when(
kld3 ==0 ~ NA_real_,
kld3 >0 ~ log10(kld3)
)) %>% mutate(log10kld3_lag = case_when(
kld3_lag==0 ~NA_real_,
kld3_lag>0 ~ log10(kld3_lag)
))
df <- df %>% group_by(id,run) %>% mutate(expl_longer =(case_when(
rt_csv - rt_lag > 1 ~ 'Longer',
rt_csv - rt_lag < -1 ~ '0',
rt_csv - rt_lag < 1 & rt_csv - rt_lag > -1 ~ '0'
)))
df <- df %>% group_by(id,run) %>% mutate(expl_shorter =(case_when(
rt_csv - rt_lag > 1 ~ '0',
rt_csv - rt_lag < -1 ~ 'Shorter',
rt_csv - rt_lag < 1 & rt_csv - rt_lag > -1 ~ '0'
)))
df <- df %>% group_by(id,run)  %>% mutate(rt_bin = (case_when(
rt_csv_sc <= -1 ~ '-1',
rt_csv_sc > -1 & rt_csv_sc <= 0 ~ '-0.5',
rt_csv_sc > 0 & rt_csv_sc <= 1 ~ '0.5',
rt_csv_sc > 1 ~ '1'
)))
df <- df %>% group_by(id,run) %>% mutate(trial_bin = (case_when(
run_trial <= 10 ~ 'Early',
run_trial > 10 & run_trial < 30 ~ 'Middle',
run_trial >=30 ~ 'Late',
)))
df <- df %>% select(id,run,trial_bin,rewFunc,rt_bin,v_max_wi,expl_longer,expl_shorter,rt_csv_sc,v_entropy_wi, v_entropy_wi_change,run_trial,trial_neg_inv_sc,rt_vmax_change,kld3,abs_pe_max_sc,abs_pe_max_lag_sc,pe_max_sc,pe_max_lag_sc)
Q <- merge(df, Q, by = c("id", "run", "run_trial")) %>% arrange("id","run","run_trial","evt_time")
Q$expl_longer <- relevel(as.factor(Q$expl_longer),ref='0')
Q$expl_shorter <- relevel(as.factor(Q$expl_shorter),ref='0')
Q$rt_bin <- relevel(as.factor(Q$rt_bin),ref='-0.5')
Q$trial_bin <- relevel(as.factor(Q$trial_bin),ref='Middle')
# test age & sex
demo <- read.table(file=file.path(repo_directory, 'fmri/data/mmy3_demographics.tsv'),sep='\t',header=TRUE)
demo <- demo %>% rename(id=lunaid)
demo <- demo %>% select(!adult & !scandate)
Q <- inner_join(Q,demo,by=c('id'))
Q$female <- relevel(as.factor(Q$female),ref='0')
Q$age <- scale(Q$age)
rm(decode_formula)
decode_formula <- formula(~ (1|id))
decode_formula[[1]] = formula(~ age*HCwithin + female*HCwithin +  v_max_wi*HCwithin +
v_entropy_wi_change + trial_neg_inv_sc*HCwithin +
pe_max_sc*HCwithin + v_entropy_wi*HCwithin + rt_bin +
expl_shorter*HCwithin + expl_longer*HCwithin +  # binary expl_code incr / decr separate variables
v_entropy_wi_change:expl_longer +
v_entropy_wi_change:expl_shorter +
HCbetween +
(1|id))
splits = c('evt_time','network','HC_region')
source("~/fmri.pipeline/R/mixed_by.R")
for (i in 1){
setwd('~/vmPFC/MEDUSA Schaefer Analysis/vmPFC_HC_model_selection')
df0 <- decode_formula[[i]]
print(df0)
qH <- quantile(df$v_entropy_wi,c(0.1,0.9),na.rm=TRUE)
qT <- quantile(df$trial_neg_inv_sc,c(0.1,0.9),na.rm=TRUE)
qV <- quantile(df$v_max_wi,c(0.1,0.9),na.rm=TRUE)
qPE = quantile(df$pe_max_sc,c(0.1,0.9),na.rm=TRUE)
ddf <- mixed_by(Q, outcomes = "vmPFC_decon", rhs_model_formulae = df0 , split_on = splits,
padjust_by = "term", padjust_method = "fdr", ncores = ncores, refit_on_nonconvergence = 3,
tidy_args = list(effects=c("fixed","ran_vals","ran_pars","ran_coefs"),conf.int=TRUE),
emtrends_spec = list(
H_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c("v_entropy_wi"), at = list(v_entropy_wi=c(qH))),
T_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c("trial_neg_inv_sc"), at = list(trial_neg_inv_sc=c(qT))),
V_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('v_max_wi'), at=list(v_max_wi=c(qV))),
PE_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('pe_max_sc'), at=list(pe_max_sc=c(qPE)))
)
)
curr_date <- strftime(Sys.time(),format='%Y-%m-%d')
save(ddf,file=paste0(curr_date,'-vmPFC-HC-network-feedback-',i,'.Rdata'))
}
for (i in 1){
setwd('~/vmPFC/MEDUSA Schaefer Analysis/vmPFC_HC_model_selection')
df0 <- decode_formula[[i]]
print(df0)
qH <- quantile(df$v_entropy_wi,c(0.1,0.9),na.rm=TRUE)
qT <- quantile(df$trial_neg_inv_sc,c(0.1,0.9),na.rm=TRUE)
qV <- quantile(df$v_max_wi,c(0.1,0.9),na.rm=TRUE)
qPE = quantile(df$pe_max_sc,c(0.1,0.9),na.rm=TRUE)
ddf <- mixed_by(Q, outcomes = "vmPFC_decon", rhs_model_formulae = df0 , split_on = splits,
padjust_by = "term", padjust_method = "fdr", ncores = ncores, refit_on_nonconvergence = 3,
tidy_args = list(effects=c("fixed","ran_vals","ran_pars","ran_coefs"),conf.int=TRUE),
emtrends_spec = list(
H_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c("v_entropy_wi"), at = list(v_entropy_wi=c(qH))),
T_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c("trial_neg_inv_sc"), at = list(trial_neg_inv_sc=c(qT))),
V_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('v_max_wi'), at=list(v_max_wi=c(qV))),
PE_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('pe_max_sc'), at=list(pe_max_sc=c(qPE)))
)
)
curr_date <- strftime(Sys.time(),format='%Y-%m-%d')
save(ddf,file=paste0(curr_date,'-vmPFC-HC-network-feedback-',i,'.Rdata'))
}
ddf$emtrends_list
splits = c('evt_time','network','HC_region')
source("~/fmri.pipeline/R/mixed_by.R")
for (i in 1){
setwd('~/vmPFC/MEDUSA Schaefer Analysis/vmPFC_HC_model_selection')
df0 <- decode_formula[[i]]
print(df0)
qH <- quantile(df$v_entropy_wi,c(0.1,0.9),na.rm=TRUE)
qT <- quantile(df$trial_neg_inv_sc,c(0.1,0.9),na.rm=TRUE)
qV <- quantile(df$v_max_wi,c(0.1,0.9),na.rm=TRUE)
qPE = quantile(df$pe_max_sc,c(0.1,0.9),na.rm=TRUE)
qdH <- quantile(df$v_entropy_wi_change,c(0.1,0.9),na.rm=TRUE)
ddf <- mixed_by(Q, outcomes = "vmPFC_decon", rhs_model_formulae = df0 , split_on = splits,
padjust_by = "term", padjust_method = "fdr", ncores = ncores, refit_on_nonconvergence = 3,
tidy_args = list(effects=c("fixed","ran_vals","ran_pars","ran_coefs"),conf.int=TRUE),
emtrends_spec = list(
H_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c("v_entropy_wi"), at = list(v_entropy_wi=c(qH))),
T_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c("trial_neg_inv_sc"), at = list(trial_neg_inv_sc=c(qT))),
V_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('v_max_wi'), at=list(v_max_wi=c(qV))),
PE_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('pe_max_sc'), at=list(pe_max_sc=c(qPE))),
dH_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('v_entropy_wi_change'), at=list(pe_max_sc=c(qdH)))
)
)
curr_date <- strftime(Sys.time(),format='%Y-%m-%d')
save(ddf,file=paste0(curr_date,'-vmPFC-HC-network-feedback-',i,'.Rdata'))
}
qdH
ddf <- mixed_by(Q, outcomes = "vmPFC_decon", rhs_model_formulae = df0 , split_on = splits,
padjust_by = "term", padjust_method = "fdr", ncores = ncores, refit_on_nonconvergence = 3,
tidy_args = list(effects=c("fixed","ran_vals","ran_pars","ran_coefs"),conf.int=TRUE),
emtrends_spec = list(
H_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c("v_entropy_wi"), at = list(v_entropy_wi=c(qH))),
T_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c("trial_neg_inv_sc"), at = list(trial_neg_inv_sc=c(qT))),
V_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('v_max_wi'), at=list(v_max_wi=c(qV))),
PE_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('pe_max_sc'), at=list(pe_max_sc=c(qPE))),
dH_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('v_entropy_wi_change'), at=list(v_entropy_wi_change=c(qdH)))
)
)
curr_date <- strftime(Sys.time(),format='%Y-%m-%d')
save(ddf,file=paste0(curr_date,'-vmPFC-HC-network-feedback-',i,'.Rdata'))
qdH
df$v_entropy_wi_change
qdH
qdH <- quantile(df$v_entropy_wi_change,c(0.05,0.1,0.25,0.5,0.75,0.9,0.95),na.rm=TRUE)
ddf <- mixed_by(Q, outcomes = "vmPFC_decon", rhs_model_formulae = df0 , split_on = splits,
padjust_by = "term", padjust_method = "fdr", ncores = ncores, refit_on_nonconvergence = 3,
tidy_args = list(effects=c("fixed","ran_vals","ran_pars","ran_coefs"),conf.int=TRUE),
emtrends_spec = list(
H_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c("v_entropy_wi"), at = list(v_entropy_wi=c(qH))),
T_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c("trial_neg_inv_sc"), at = list(trial_neg_inv_sc=c(qT))),
V_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('v_max_wi'), at=list(v_max_wi=c(qV))),
PE_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('pe_max_sc'), at=list(pe_max_sc=c(qPE))),
dH_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('v_entropy_wi_change'), at=list(v_entropy_wi_change=c(qdH)))
)
)
curr_date <- strftime(Sys.time(),format='%Y-%m-%d')
save(ddf,file=paste0(curr_date,'-vmPFC-HC-network-feedback-',i,'.Rdata'))
decode_formula <- formula(~ (1|id))
decode_formula[[1]] = formula(~ age*HCwithin + female*HCwithin +  v_max_wi*HCwithin +
v_entropy_wi_change*HCwithin + trial_neg_inv_sc*HCwithin +
pe_max_sc*HCwithin + v_entropy_wi*HCwithin + rt_bin +
expl_shorter*HCwithin + expl_longer*HCwithin +  # binary expl_code incr / decr separate variables
v_entropy_wi_change:expl_longer +
v_entropy_wi_change:expl_shorter +
HCbetween +
(1|id))
splits = c('evt_time','network','HC_region')
source("~/fmri.pipeline/R/mixed_by.R")
for (i in 1){
setwd('~/vmPFC/MEDUSA Schaefer Analysis/vmPFC_HC_model_selection')
df0 <- decode_formula[[i]]
print(df0)
qH <- quantile(df$v_entropy_wi,c(0.1,0.9),na.rm=TRUE)
qT <- quantile(df$trial_neg_inv_sc,c(0.1,0.9),na.rm=TRUE)
qV <- quantile(df$v_max_wi,c(0.1,0.9),na.rm=TRUE)
qPE = quantile(df$pe_max_sc,c(0.1,0.9),na.rm=TRUE)
qdH <- quantile(df$v_entropy_wi_change,c(0.1,0.9),na.rm=TRUE)
ddf <- mixed_by(Q, outcomes = "vmPFC_decon", rhs_model_formulae = df0 , split_on = splits,
padjust_by = "term", padjust_method = "fdr", ncores = ncores, refit_on_nonconvergence = 3,
tidy_args = list(effects=c("fixed","ran_vals","ran_pars","ran_coefs"),conf.int=TRUE),
emtrends_spec = list(
H_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c("v_entropy_wi"), at = list(v_entropy_wi=c(qH))),
T_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c("trial_neg_inv_sc"), at = list(trial_neg_inv_sc=c(qT))),
V_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('v_max_wi'), at=list(v_max_wi=c(qV))),
PE_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('pe_max_sc'), at=list(pe_max_sc=c(qPE))),
dH_HC = list(outcome='vmPFC_decon', model_name='model1', var='HCwithin',
specs=c('v_entropy_wi_change'), at=list(v_entropy_wi_change=c(qdH)))
)
)
curr_date <- strftime(Sys.time(),format='%Y-%m-%d')
save(ddf,file=paste0(curr_date,'-vmPFC-HC-network-feedback-',i,'.Rdata'))
}
###################################
##### vmPFC - HC -feedback    #####
###################################
rm(Q)
message("Loading vmPFC medusa data from cache: ", vmPFC_cache_dir)
library(stringr)
library(pracma)
library(wesanderson)
library(tidyverse)
# start with vmPFC simple, add in term by term, eventually add HC interaction
repo_directory <- "~/clock_analysis"
HC_cache_dir = '~/vmPFC/MEDUSA Schaefer Analysis'
vmPFC_cache_dir = '~/vmPFC/MEDUSA Schaefer Analysis'
ncores <- 26
rm(Q)
message("Loading vmPFC medusa data from cache: ", vmPFC_cache_dir)
message("Loading vmPFC medusa data from cache: ", vmPFC_cache_dir)
load(file.path(vmPFC_cache_dir,  'feedback_vmPFC_Schaefer_tall_ts_1.Rdata'))
vmPFC <- fb_comb
vmPFC <- vmPFC %>% filter(evt_time > -6 & evt_time < 6)
rm(fb_comb)
vmPFC <- vmPFC %>% select(id,run,run_trial,decon_mean,atlas_value,evt_time,region,symmetry_group,network)
vmPFC <- vmPFC %>% rename(vmPFC_decon = decon_mean)
load(file.path(HC_cache_dir,'feedback_hipp_tall_ts_1.Rdata'))
hc <- fb_comb
hc <- hc %>% filter(evt_time > -6 & evt_time < 6)
rm(fb_comb)
hc <- hc %>% mutate(
HC_region = case_when(
bin_num <= 8 ~ 'AH',
bin_num >8 ~ 'PH'
),
)
hc <- hc %>% group_by(id,run,run_trial,evt_time,HC_region) %>% summarize(decon1 = mean(decon_mean,na.rm=TRUE)) %>% ungroup() # 12 -> 2
hc <- hc %>% group_by(id,run) %>% mutate(HCwithin = scale(decon1),HCbetween=mean(decon1,na.rm=TRUE)) %>% ungroup()
Q <- merge(vmPFC,hc,by=c("id","run","run_trial","evt_time"))
Q <- Q %>% select(!decon1)
source('~/vmPFC/get_trial_data_vmPFC.R')
df <- get_trial_data(repo_directory=repo_directory,dataset='mmclock_fmri')
df <- df %>% select(trial,v_max,v_entropy,rt_lag,v_entropy_full,v_entropy_wi_full,rt_vmax_full,rt_vmax_change_full,rt_csv_sc,rt_csv,id, run, run_trial, last_outcome, trial_neg_inv_sc,pe_max, rt_vmax, score_csv,
v_max_wi, v_entropy_wi,kld3,rt_change,total_earnings, rewFunc,rt_csv, pe_max,v_chosen,rewFunc,iti_ideal,
rt_vmax_lag_sc,rt_vmax_change,outcome,pe_max,kld3_lag,rt_lag_sc,rt_next,v_entropy_wi_change,pe_max_lag) %>%
group_by(id, run) %>%
mutate(iti_lag = lag(iti_ideal), rt_sec = rt_csv/1000) %>% ungroup() %>%
mutate(v_chosen_sc = scale(v_chosen),
abs_pe_max_sc = scale(abs(pe_max)),
abs_pe_max_lag_sc = scale(abs(pe_max_lag)),
pe_max_sc = scale(pe_max),
pe_max_lag_sc = scale(lag(pe_max)),
rt_vmax_sc = scale(rt_vmax),
v_entropy_sc = scale(v_entropy),
rt_vmax_change_sc = scale(rt_vmax_change)) %>% arrange(id, run, run_trial) %>% mutate(log10kld3 = case_when(
kld3 ==0 ~ NA_real_,
kld3 >0 ~ log10(kld3)
)) %>% mutate(log10kld3_lag = case_when(
kld3_lag==0 ~NA_real_,
kld3_lag>0 ~ log10(kld3_lag)
))
df <- df %>% group_by(id,run) %>% mutate(expl_longer =(case_when(
rt_csv - rt_lag > 1 ~ 'Longer',
rt_csv - rt_lag < -1 ~ '0',
rt_csv - rt_lag < 1 & rt_csv - rt_lag > -1 ~ '0'
)))
df <- df %>% group_by(id,run) %>% mutate(expl_shorter =(case_when(
rt_csv - rt_lag > 1 ~ '0',
rt_csv - rt_lag < -1 ~ 'Shorter',
rt_csv - rt_lag < 1 & rt_csv - rt_lag > -1 ~ '0'
)))
df <- df %>% group_by(id,run)  %>% mutate(rt_bin = (case_when(
rt_csv_sc <= -1 ~ '-1',
rt_csv_sc > -1 & rt_csv_sc <= 0 ~ '-0.5',
rt_csv_sc > 0 & rt_csv_sc <= 1 ~ '0.5',
rt_csv_sc > 1 ~ '1'
)))
df <- df %>% group_by(id,run) %>% mutate(trial_bin = (case_when(
run_trial <= 10 ~ 'Early',
run_trial > 10 & run_trial < 30 ~ 'Middle',
run_trial >=30 ~ 'Late',
)))
df <- df %>% select(id,run,trial_bin,rewFunc,rt_bin,v_max_wi,expl_longer,expl_shorter,rt_csv_sc,v_entropy_wi, v_entropy_wi_change,run_trial,trial_neg_inv_sc,rt_vmax_change,kld3,abs_pe_max_sc,abs_pe_max_lag_sc,pe_max_sc,pe_max_lag_sc)
Q <- merge(df, Q, by = c("id", "run", "run_trial")) %>% arrange("id","run","run_trial","evt_time")
Q$expl_longer <- relevel(as.factor(Q$expl_longer),ref='0')
Q$expl_shorter <- relevel(as.factor(Q$expl_shorter),ref='0')
Q$rt_bin <- relevel(as.factor(Q$rt_bin),ref='-0.5')
Q$trial_bin <- relevel(as.factor(Q$trial_bin),ref='Middle')
# test age & sex
demo <- read.table(file=file.path(repo_directory, 'fmri/data/mmy3_demographics.tsv'),sep='\t',header=TRUE)
demo <- demo %>% rename(id=lunaid)
demo <- demo %>% select(!adult & !scandate)
Q <- inner_join(Q,demo,by=c('id'))
Q$female <- relevel(as.factor(Q$female),ref='0')
Q$age <- scale(Q$age)
rm(decode_formula)
decode_formula <- formula(~ (1|id))
decode_formula[[1]] = formula(~ age*HCwithin + female*HCwithin +  v_max_wi*HCwithin +
v_entropy_wi_change*HCwithin + trial_neg_inv_sc*HCwithin +
pe_max_sc*HCwithin + v_entropy_wi*HCwithin + rt_bin +
expl_shorter*HCwithin + expl_longer*HCwithin +  # binary expl_code incr / decr separate variables
v_entropy_wi_change:expl_longer +
v_entropy_wi_change:expl_shorter +
HCbetween +
(1|id))
ggplot(df,aes(x=v_entropy_wi_change)) + geom_histogram()
dev.off()
getwd()
cd ..
setwd('~/vmPFC')
pdf('fname'v_entropy_wi_change_hist.pdf', width = 9, height = 3.5)
pdf(v_entropy_wi_change_hist.pdf', width = 9, height = 3.5)
pdf('v_entropy_wi_change_hist.pdf', width = 9, height = 3.5)
ggplot(df,aes(x=v_entropy_wi_change)) + geom_histogram()
gg <-ggplot(df,aes(x=v_entropy_wi_change)) + geom_histogram()
print(gg)
dev.off()
pdf('v_entropy_wi_change_hist.pdf', width = 9, height = 3.5)
gg <-ggplot(df,aes(x=v_entropy_wi_change)) + geom_histogram()
print(gg)
dev.off()
pdf('v_entropy_wi_hist.pdf', width = 9, height = 3.5)
gg <-ggplot(df,aes(x=v_entropy_wi)) + geom_histogram()
print(gg)
dev.off()
psych::describe(df$v_entropy_wi_change)
psych::describe(df$v_entropy_wi)
qdH <- quantile(df$v_entropy_wi_change,c(0.1,0.9),na.rm=TRUE)
qdH
qH <- quantile(df$v_entropy_wi,c(0.1,0.9),na.rm=TRUE)
qH
psych::describe(df$v_entropy_wi_change,quant=c(0.1,0.9))
psych::describe(df$pe_max_sc,quant=c(0.1,0.9))
dev.off()
