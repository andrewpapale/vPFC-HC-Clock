getwd()
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/Subjects/32765/physio/32765_physio_raw.rdata")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_raw.rdata")
View(physio_concat_new)
df = dplyr::as_tibble(physio_concat_new)
df = dplyr::as_tibble(physio_concat_new$eeg)
View(df)
df$recording_time[1]
df$recording_time[2]
format(df$recording_time[1], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[2], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[2000], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[200000], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[200000000], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[20000000000], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[20000000000000], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[20000000000000], scientific=F)
df$recording_time[200000000]
length(df$recording_time)
19905478 < 200000000
format(df$recording_time[1], scientific=F) == format(df$recording_time[19905478], scientific=F)
format(df$recording_time[1], scientific=F) == format(df$recording_time[19905478], scientific=F)
df$recording_time[19905478]
df$recording_time[1]
df2 = dplyr::as_tibble(physio_concat_new$ecg)
View(df2)
format(df2$recording_time[1], scientific=F) == format(df2$recording_time[2], scientific=F)
format(df2$time_ms[1], scientific=F) == format(df2$time_ms[2], scientific=F)
length(df2$time_ms)
format(df2$time_ms[1], scientific=F) == format(df2$time_ms[89574], scientific=F)
EEG = dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse ORDER BY recording_time ASC")
EEG = RSQlite::dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse ORDER BY recording_time ASC")
EEG = RSQLite::dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse ORDER BY recording_time ASC")
EEG = RSQLite::dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
EEGd = RSQLite::dbGetQuery(EEG, "SELECT * FROM EEG_muse ORDER BY recording_time ASC")
EEG = RSQLite::dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
library(RSQLite)
EEG = dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/32765/physio/32765_physio_20220124141125.db")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse ORDER BY recording_time ASC")
View(EEGd)
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse")
View(EEGd)
EEGd = dbGetQuery(EEG, "SELECT datetime(recording_time, 'unixepoch', 'localtime') FROM EEG_muse")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse WHERE date(recording_time / 1000,'unixepoch')")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220208120617.db")
View(physio_concat_new)
df_4_ecg = dplyr::as_tibble(physio_concat_new$ecg)
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220208120617.db")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220208121147.db")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220212053820.db")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220212053820.db")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220212053820.db")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440197/physio/440197_physio_20211102175806.db")
load("")
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/540010/physio/540010_physio_20211209160500.db")
readRDS("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220208120617.db")
library(RSQLite)
load("/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_raw.rdata")
df = dplyr::as_tibble(physio_concat_new)
df = dplyr::as_tibble(physio_concat_new$eeg)
View(df)
EEG = dbConnect(SQLite(), "/Volumes/bierka_root/datamesh/RAW/Momentum_App/data/Subjects/440452/physio/440452_physio_20220208120617.db")
EEGd = dbGetQuery(EEG, "SELECT * FROM EEG_muse")
View(EEGd)
format(df$recording_time[1], scientific=F) == format(df$recording_time[2], scientific=F)
length(df$recording_time)
format(df$recording_time[1], scientific=F) == format(df$recording_time[12311195], scientific=F)
EEGd$recording_time
EEGd$recording_time[1]
physio_concat_new$eeg$recording_time
physio_concat_new$eeg$recording_time[1]
as.double(physio_concat_new$eeg$recording_time[1])
fbt
EEGd = dbGetQuery(EEG, 'SELECT * FROM EEG_muse Where printf("%f", recording_time)')
View(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time) FROM EEG_muse')
View(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT * FROM EEG_muse WHERE recording_time=printf("%f", recording_time)')
EEGd = dbGetQuery(EEG, 'SELECT * FROM EEG_muse WHERE recording_time=printf("%f", recording_time)')
View(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT recording_time=printf("%f", recording_time) FROM EEG_muse')
View(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time),* FROM EEG_muse')
#shane come back
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time) FROM EEG_muse')
EEGd
view(EEGd)
View(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT quote(recording_time) FROM EEG_muse')
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time) FROM EEG_muse')
colnames(EEGd)
d <- colnames(EEGd)
names(EEGd)
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time), * FROM EEG_muse')
EEGd$recording_time[1]==EEGd$`printf("%f", recording_time)`[1]
EEGd = dbGetQuery(EEG, 'SELECT printf("%f", recording_time), * FROM EEG_muse')
EEGd
install.packages("ggplot2")
# load the DataTracker
library(DataTracker)
# set our backup location
BACKUP_PATH = '/Volumes/bierka_root/datamesh/RAW/REDCap_backups'
backup_redcap(cfg=lab.cfg(), protocol='pandea',
out_dir=paste0(BACKUP_PATH, '/pandea'),
include_timestamp=TRUE)
cfg=lab.cfg()
# load the DataTracker
library(DataTracker)
# set our backup location
BACKUP_PATH = '/Volumes/bierka_root/datamesh/RAW/REDCap_backups'
# update the configuration json file
fetch_datatracker_cfg(repo="Lab_Configs",
path="datatracker/lab_cfg.json",
gh_root="DecisionNeurosciencePsychopathology")
source("~/Desktop/cron_scripts/redcap_backups.R", echo=TRUE)
load("~/vmPFC/MEDUSA Schaefer Analysis/vmPFC_HC_model_selection/2022-05-11-vmPFC-HC-symmetry-feedback-1.Rdata")
ddf <- ddf$coef_df_reml
ddf$symmetry_group
ddq <- ddf %>% filter(effect == 'fixed')
library(tidyverse)
ddq <- ddf %>% filter(effect == 'fixed')
ddq
ddq <- ddf %>% filter(effect == 'fixed' && term == 'HCwithin')
ddq <- ddf %>% filter(effect == 'fixed' && term == HCwithin)
ddq <- ddf %>% filter(effect == 'fixed' && term == 'HCwithin')
unique(ddf$term)
ddf$rhs[[1]]
ddq <- ddf %>% filter(effect == 'fixed' && term == "HCwithin")
ddq <- ddf %>% filter(term == "HCwithin")
ddq
ddq <- ddf %>% filter(term == "HCwithin" && effect=='fixed')
ddq <- ddf %>% filter(term == "HCwithin" && effect==fixed)
ddf$effect=='fixed'
term[ddf$effect=='fixed']
unique(ddf$term[effect=='fixed'])
unique(ddf$term[ddf$effect=='fixed'])
ddq <- ddf %>% filter(term == "HCwithin" & effect==fixed)
ddq <- ddf %>% filter(term == "HCwithin" & effect=='fixed')
ddq
ddq1 <- ddq %>% group_by(symmetry_group) %>% summarize(estimate) %>% ungroup()
ddq1
ddq1 <- ddq %>% group_by(symmetry_group, HC_region) %>% summarize(estimate) %>% ungroup()
ddq1
View(ddq1)
ddq1 <- ddq %>% group_by(symmetry_group, HC_region) %>% summarize(estimate = mean(estimate,na.rm=TRUE)) %>% ungroup()
ddq1 <- ddq %>% group_by(symmetry_group, HC_region) %>% summarize(estimate = log10(mean(estimate,na.rm=TRUE))) %>% ungroup()
ddq1 <- ddq %>% group_by(symmetry_group, HC_region) %>% summarize(estimate = mean(estimate,na.rm=TRUE)) %>% ungroup()
library(stringr)
library(pracma)
library(wesanderson)
library(tidyverse)
# start with vmPFC simple, add in term by term, eventually add HC interaction
repo_directory <- "~/clock_analysis"
HC_cache_dir = '~/vmPFC/MEDUSA Schaefer Analysis'
vmPFC_cache_dir = '~/vmPFC/MEDUSA Schaefer Analysis'
message("Loading vmPFC medusa data from cache: ", vmPFC_cache_dir)
load(file.path(vmPFC_cache_dir,  'feedback_vmPFC_Schaefer_tall_ts_1.Rdata'))
vmPFC <- fb_comb
vmPFC <- vmPFC %>% filter(evt_time > -6 & evt_time < 6)
rm(fb_comb)
vmPFC <- vmPFC %>% select(id,run,run_trial,decon_mean,atlas_value,evt_time,region,symmetry_group,network)
vmPFC <- vmPFC %>% rename(vmPFC_decon = decon_mean)
source('~/vmPFC/get_trial_data_vmPFC.R')
df <- get_trial_data_vmPFC(repo_directory=repo_directory,dataset='mmclock_fmri')
df <- df %>%
group_by(id, run) %>%
mutate(iti_lag = lag(iti_ideal), rt_sec = rt_csv/1000) %>% ungroup() %>%
mutate(v_chosen_sc = scale(v_chosen),
abs_pe_max_sc = scale(abs(pe_max)),
pe_max_sc = scale(pe_max),
pe_max_lag_sc = scale(lag(pe_max)),
abs_pe_max_lag_sc = scale(abs(pe_max_lag)),
rt_vmax_sc = scale(rt_vmax),
v_entropy_sc = scale(v_entropy),
v_entropy_wi_change_lag = lag(v_entropy_wi_change),
rt_vmax_change_sc = scale(rt_vmax_change)) %>% arrange(id, run, run_trial) %>% mutate(log10kld3 = case_when(
kld3 ==0 ~ NA_real_,
kld3 >0 ~ log10(kld3)
)) %>% mutate(log10kld3_lag = case_when(
kld3_lag==0 ~NA_real_,
kld3_lag>0 ~ log10(kld3_lag)
))
df <- df %>% group_by(id,run) %>% mutate(expl_longer =(case_when(
rt_csv - rt_lag > 1 ~ 'Longer',
rt_csv - rt_lag < -1 ~ '0',
rt_csv - rt_lag < 1 & rt_csv - rt_lag > -1 ~ '0'
)))
df <- df %>% group_by(id,run) %>% mutate(expl_shorter =(case_when(
rt_csv - rt_lag > 1 ~ '0',
rt_csv - rt_lag < -1 ~ 'Shorter',
rt_csv - rt_lag < 1 & rt_csv - rt_lag > -1 ~ '0'
)))
library(stringr)
library(pracma)
library(wesanderson)
library(tidyverse)
# start with vmPFC simple, add in term by term, eventually add HC interaction
repo_directory <- "~/clock_analysis"
HC_cache_dir = '~/vmPFC/MEDUSA Schaefer Analysis'
vmPFC_cache_dir = '~/vmPFC/MEDUSA Schaefer Analysis'
message("Loading vmPFC medusa data from cache: ", vmPFC_cache_dir)
load(file.path(vmPFC_cache_dir,  'feedback_vmPFC_Schaefer_tall_ts_1.Rdata'))
vmPFC <- fb_comb
vmPFC <- vmPFC %>% filter(evt_time > -6 & evt_time < 6)
rm(fb_comb)
vmPFC <- vmPFC %>% select(id,run,run_trial,decon_mean,atlas_value,evt_time,region,symmetry_group,network)
vmPFC <- vmPFC %>% rename(vmPFC_decon = decon_mean)
source('~/vmPFC/get_trial_data_vmPFC.R')
df <- get_trial_data_vmPFC(repo_directory=repo_directory,dataset='mmclock_fmri')
install.packages("parallelly")
source('~/vmPFC/get_trial_data_vmPFC.R')
df <- get_trial_data_vmPFC(repo_directory=repo_directory,dataset='mmclock_fmri')
source('~/vmPFC/get_trial_data_vmPFC.R')
df <- get_trial_data_vmPFC(repo_directory=repo_directory,dataset='mmclock_fmri')
source('~/vmPFC/get_trial_data_vmPFC.R')
df <- get_trial_data_vmPFC(repo_directory=repo_directory,dataset='mmclock_fmri')
uninstall.packages('ggplot2')
uninstall.package('ggplot2')
remove.packages('ggplot2')
install.packages('ggplot2')
install.packages("ggplot2")
remove.packages('ggplot2')
setwd('~/rl_ema_monitoring/')
source("~/rl_ema_monitoring/ema_runner_testing.R", echo=TRUE)
setwd('~/rl_ema_monitoring/')
source("~/rl_ema_monitoring/ema_runner_testing.R", echo=TRUE)
source("/Volumes/Users/Angela/Explore/explore_behavioral_analysis_Tolman.R", echo=TRUE)
m2@optinfo@conv
m2@optinfo$conv
trial-df$reward_lag_rec
trial_df$reward_lag_rec
trial_df <- trial_df %>% filter(!is.na(reward_lag_rec))
##reward lag rec as random
m2 <- lmer(rt_csv ~ rt_lag_sc*reward_lag_rec*groupLeth + rt_vmax_lag_sc*condition_trial_neg_inv_sc*groupLeth +
rt_lag_sc*condition_trial_neg_inv_sc*groupLeth + (reward_lag_rec|id) + (1|id/run), trial_df)
while (any(grepl("failed to converge", m2@optinfo$conv$lme4$messages) )) {
print(m2@optinfo$conv$lme4$conv)
ss <- getME(m2,c("theta","fixef"))
m2 <- update(m2, start=ss)}
source("/Volumes/Users/Angela/Explore/explore_behavioral_analysis_Tolman.R", echo=TRUE)
setwd('~/rl_ema_monitoring/')
source("~/rl_ema_monitoring/ema_runner_testing.R", echo=TRUE)
gc()
old_hc_l <- read_csv('/Volumes/Users/Andrew/MMClock_MEDuSA_old/HC_left_feedback_long_decon_locked.csv.gz')
old_hc_r <- read_csv('/Volumes/Users/Andrew/MMClock_MEDuSA_old/HC_right_feedback_long_decon_locked.csv.gz')
colnames(old_hc_l)
View(old_hc_l)
old_hc <- inner_join(old_hc_l,old_hc_r,by=c('id','run','trial','evt_time','atlas_value'))
rm(old_hc)
gc()
old_hc_l <- read_csv('/Volumes/Users/Andrew/MMClock_MEDuSA_old/HC_left_feedback_long_decon_locked.csv.gz') %>% mutate(side = 'L')
old_hc_r <- read_csv('/Volumes/Users/Andrew/MMClock_MEDuSA_old/HC_right_feedback_long_decon_locked.csv.gz') %>% mutate(side = 'R')
head(old_hc_l)
old_hc <- rbind(old_hc_l,old_hc_r) %>% arrange(id,run,trial,atlas_value,evt_time)
rm(old_hc_l,old_hc_r)
gc()
load('/Volumes/Users/Andrew/MEDuSA_data_MMClock/feedback_hipp_tall_ts_1.Rdata')
head(fb_comb)
old_hc <- old_hc %>% select(!decon_median,!decon_sd,!atlas,!online)
old_hc <- old_hc %>% select(!decon_median,!decon_sd,!atlas)
gc()
unique(fb_comb$evt_time)
unique(old_hc$evt_time)
head(fb_comb)
head(old_hc)
fb_comb <- fb_comb %>% arrange(id,run,trial,atlas_value,evt_time) %>%
select(!decon_median,!decon_sd, !atlas) %>% mutate(side1 = case_when(side=='l'~'L',side=='r'~'R')) %>% rename(side1=side)
old_hc <- old_hc %>% rename(atlas_value = bin_num)
old_hc <- old_hc %>% rename(bin_num = atlas_value)
fb_comb <- fb_comb %>% arrange(id,run,trial,atlas,evt_time) %>%
select(!decon_median,!decon_sd, !atlas) %>% mutate(side1 = case_when(side=='l'~'L',side=='r'~'R')) %>% rename(side1=side)
fb_comb <- fb_comb %>% arrange(id,run,trial,atlas,evt_time) %>%
select(!decon_median,!decon_sd, !atlas) %>%
mutate(side1 = case_when(side=='l'~'L',side=='r'~'R')) %>% select(!side) %>% rename(side=side1)
colnames(fb_comb)
colnames(old_hc)
old_hc <- old_hc %>% select(!decon_median & !decon_sd & !atlas)
fb_comb <- fb_comb %>% arrange(id,run,trial,atlas,evt_time) %>%
select(!decon_median & !decon_sd & !atlas) %>%
mutate(side1 = case_when(side=='l'~'L',side=='r'~'R')) %>% select(!side) %>% rename(side=side1)
colnames(fb_comb)
colnames(old_hc)
fb_comb <- fb_comb %>% select(!run_trial & !online)
old_hc <- old_hc %>% mutate(dataset = 'old')
fb_comb <- fb_comb %>% mutate(dataset = 'new')
hc <- rbind(old_hc,new_hc)
hc <- rbind(old_hc,fb_comb)
rm(old_hc,fb_comb)
gc()
library(corrplot)
upgrade('corrplot')
upgrade(corrplot)
install.packages('corrplot')
install.packages("corrplot")
library(corrplot)
install.packages('ggcorrplot')
library(ggcorrplot)
df <- hc %>% group_by(id,run,trial,evt_time,side) %>% summary(corr_mean_decon = cor(decon_mean, na.rm=TRUE, use='complete.obs',method='spearman')) %>% ungroup()
df <- hc %>% group_by(id,run,trial,evt_time,side) %>% summarixr(corr_mean_decon = cor(decon_mean, na.rm=TRUE, use='complete.obs',method='spearman')) %>% ungroup()
df <- hc %>% group_by(id,run,trial,evt_time,side) %>% summarize(corr_mean_decon = cor(decon_mean, na.rm=TRUE, use='complete.obs',method='spearman')) %>% ungroup()
df <- hc %>% group_by(id,run,trial,evt_time,side) %>% summarize(corr_mean_decon = cor(decon_mean, use='complete.obs',method='spearman')) %>% ungroup()
colnames(hc)
df <- hc %>% group_by(id,run,trial,evt_time,side,dataset) %>% summarize(corr_mean_decon = cor(decon_mean, use='complete.obs',method='spearman')) %>% ungroup()
df <- hc %>% group_by(id,run,trial,evt_time,side,bin_num,dataset) %>% summarize(corr_mean_decon = cor(decon_mean, use='complete.obs',method='spearman')) %>% ungroup()
source("~/vmPFC/test_old_new_MEDuSA_hc.R", echo=TRUE)
rm(hc)
gc()
head(fb_comb)
head(old_hc)
fb_comb <- fb_comb %>% arrange(id,run,trial,atlas,evt_time,side)
fb_comb <- fb_comb %>% arrange(id,run,trial,bin_num,evt_time,side)
head(fb_comb)
df <- cor(fb_comb$decon_mean,old_hc$decon_mean, use='complete.obs')
hc <- rbind(old_hc,fb_comb)
hc <- hc %>% pivot_wider(cols=decon_mean,names_from=dataset,names_prefix='decon_mean_')
hc <- hc %>% pivot_wider(id_cols=decon_mean,names_from=dataset,names_prefix='decon_mean_')
hc <- hc %>% pivot_wider(id_cols=decon_mean,value=decon_mean,names_from=dataset,names_prefix='decon_mean_')
hc <- hc %>% pivot_wider(id_cols=decon_mean,value=decon_mean,names_from=dataset)
hc <- hc %>% pivot_wider(id_cols=decon_mean,value=decon_mean)
hc <- hc %>% pivot_wider(id_cols=NULL,value=decon_mean,names_from=dataset)
hc <- hc %>% pivot_wider(value=decon_mean,names_from=dataset)
hc <- hc %>% pivot_wider(names_from=dataset,values_from=decon_mean)
colnames(hc)
df <- hc %>% group_by(id,run,trial,evt_time,side) %>% summarize(cor(old,new,use='complete.obs')) %>% ungroup()
df <- hc %>% group_by(id,run,trial,evt_time,bin_num,side) %>% summarize(cor(old,new,use='complete.obs')) %>% ungroup()
df <- hc %>% group_by(id,run,trial,evt_time,bin_num,side) %>% summarize(diff_new_old = new-old) %>% ungroup()
df
hist(df$diff_new_old)
gc()
library(tidyverse)
old_hc_l <- read_csv('/Volumes/Users/Andrew/MMClock_MEDuSA_old/HC_left_feedback_long_decon_locked.csv.gz') %>% mutate(side = 'L')
old_hc_r <- read_csv('/Volumes/Users/Andrew/MMClock_MEDuSA_old/HC_right_feedback_long_decon_locked.csv.gz') %>% mutate(side = 'R')
old_hc <- rbind(old_hc_l,old_hc_r) %>% arrange(id,run,trial,atlas_value,evt_time,side)
old_hc <- old_hc %>% select(!decon_median & !decon_sd & !atlas)
old_hc <- old_hc %>% rename(bin_num = atlas_value)
rm(old_hc_l,old_hc_r)
gc()
load('/Users/dnplserv/vmPFC/MEDUSA Schaefer Analysis/HC_fb.Rdata') # loads fb_comb
fb_comb <- fb_comb %>% arrange(id,run,trial,atlas,evt_time,side) %>%
select(!decon_median & !decon_sd & !atlas) %>%
mutate(side1 = case_when(side=='l'~'L',side=='r'~'R')) %>% select(!side) %>% rename(side=side1)
fb_comb <- fb_comb %>% select(!run_trial & !online)
colnames(hc)
hc <- hc %>% arrange(id,run,trial,atlas,evt_time,side) %>%
select(!decon_median & !decon_sd & !atlas & !HC_region & !run_trial & !atlas_value0) %>%
mutate(side1 = case_when(side=='l'~'L',side=='r'~'R')) %>% select(!side) %>% rename(side=side1)
hc <- hc %>% arrange(id,run,trial,bin_num,evt_time,side) %>%
select(!decon_median & !decon_sd & !atlas & !atlas_value & !HC_region & !run_trial & !atlas_value0) %>%
mutate(side1 = case_when(side=='l'~'L',side=='r'~'R')) %>% select(!side) %>% rename(side=side1)
head(hc)
unique(hc$evt_time)
unique(old_hc$evt_time)
colnames(hc)
unique(hc$id)
unique(old_hc$id)
hc <- hc %>% arrange(id,run,trial,bin_num,evt_time,side) %>%
select(!decon_median & !decon_sd & !atlas & !atlas_value & !HC_region & !run_trial & !atlas_value0) %>%
mutate(side1 = case_when(side=='l'~'L',side=='r'~'R')) %>% select(!side) %>% rename(side=side1)
hc <- hc %>% arrange(id,run,trial,bin_num,evt_time,side) %>%
select(!decon_sd & !atlas & !atlas_value & !HC_region & !run_trial & !atlas_value0) %>%
mutate(side1 = case_when(side=='l'~'L',side=='r'~'R')) %>% select(!side) %>% rename(side=side1)
hc <- hc %>% arrange(id,run,trial,bin_num,evt_time,side) %>%
select(!atlas_value & !HC_region & !run_trial & !atlas_value0) %>%
mutate(side1 = case_when(side=='l'~'L',side=='r'~'R')) %>% select(!side) %>% rename(side=side1)
old_hc <- old_hc %>% filter(evt_time > -6 & evt_time < 10) mutate(dataset = 'old')
old_hc <- old_hc %>% filter(evt_time > -6 & evt_time < 10) %>% mutate(dataset = 'old')
hc <- hc %>% filter(evt_time > -6 & evt_time < 10) %>% mutate(dataset = 'new')
old_hc <- old_hc %>% rename(old_decon_mean = decon_mean)
hc <- hc %>% rename(new_decon_mean = decon_mean)
gc()
colnames(hc)
colnames(old_hc)
hc_merged <- inner_join(hc,old_hc,by=c('id','run','trial','side','evt_time','bin_num'))
rm(hc, old_hc)
gc()
hc_merged <- hc_merged %>% group_by(id,run,trial,side,evt_time,bin_num) %>% mutate(diff_new_old = new_decon_mean-old_decon_mean) %>% ungroup()
hist(diff_new_old)
hist(hc_merged$diff_new_old)
hist(hc_merged$diff_new_old,100)
View(hc_merged)
View(hc_merged)
ggplot(hc_merged, aes(x=diff_new_old)) + geom_histogram(bins=100) + facet_grid(evt_time,bin_num)
ggplot(hc_merged, aes(x=diff_new_old)) + geom_histogram(bins=100) + facet_grid(evt_time~bin_num)
getwd()
setwd('~/vmPFC/')
pdf('test_diff_new_old_hc.pdf',height=12,width=24)
gg1 <- ggplot(hc_merged, aes(x=diff_new_old)) + geom_histogram(bins=100) + facet_grid(evt_time~bin_num)
print(gg1)
dev.off()
pdf('test_diff_new_old_hc.pdf',height=12,width=30)
gg1 <- ggplot(hc_merged, aes(x=diff_new_old)) + geom_histogram(bins=100) + facet_grid(evt_time~bin_num)
print(gg1)
dev.off()
median(hc_merged$new_decon_mean)
median(hc_merged$new_decon_mean,na.rm=TRUE)
median(hc_merged$old_decon_mean,na.rm=TRUE)
mean(hc_merged$old_decon_mean,na.rm=TRUE)
mean(hc_merged$new_decon_mean,na.rm=TRUE)
corr_val <- hc_merged %>% group_by(evt_time,bin_num) %>% summarize(corr_val = cor(hc_merged$new_decon_mean,hc_merged$old_decon_mean,use='complete.obs')) %>% ungroup()
corr_val <- hc_merged %>% group_by(evt_time,bin_num) %>% summarize(corr_val = cor(new_decon_mean,old_decon_mean,use='complete.obs')) %>% ungroup()
corrplot(corr_val)
corrplot
corr_val
corr_val <- corr_val %>% pivot_wider(names_from = evt_time, values_from = corr_val)
corr_val
corr_val <- corr_val %>% select(!bin_num)
corrplot(corr_val)
corrplot(corr_val)
ggcorrplot(corr_val)
data(mtcars)
mtcars
class(mtcars)
ggcorrplot(corr_val,hc.order = TRUE,type='upper')
ggcorrplot(corr_val,lab=TRUE)
ggcorrplot(corr_val,lab=TRUE) + xlab('bin_num')
colnames(hc_merged)
raw <- hc_merged %>% group_by(bin_num,side,evt_time) %>% summarize(mD_old = mean(old_decon_mean,na.rm=TRUE),mD_new = mean(new_decon_mean,na.rm=TRUE)) %>% ungroup()
raw
raw <- raw %>% pivot_longer(cols=c(mD_old,mD_new),names_to='dataset')
raw
ggplot(raw, aes(x=evt_time,y=value,color=dataset,group=dataset)) + facet_wrap(~side) + geom_line()
ggplot(raw, aes(x=evt_time,y=value,color=dataset,group=dataset)) + facet_wrap(bin_num~side) + geom_line()
ggplot(raw, aes(x=evt_time,y=value,color=dataset,group=dataset)) + facet_grid(bin_num~side) + geom_line()
ggplot(raw, aes(x=evt_time,y=value,color=dataset,group=dataset)) + facet_grid(bin_num~side) + geom_line()
gc()
old_hc <- read_csv('/Volumes/Users/Andrew/MMClock_MEDuSA_old/long_axis_l_2.3mm_feedback_long_decon_locked.csv')
colnames(old_hc)
head(old_hc)
unique(old_hc$axis_bin)
sort(unique(old_hc$axis_bin))
unique(old_hc$atlas)
source("~/vmPFC/test_old_new_MEDuSA_hc.R", echo=TRUE)
colnames(old_hc)
old_hc <- old_hc %>% rename(old_decon_mean = decon_interp)
hc <- hc %>% rename(new_decon_mean = decon_mean)
gc()
hc_merged <- inner_join(hc,old_hc,by=c('id','run','trial','side','evt_time','bin_num'))
unique(old_hc$run_trial)
colnames(hc)
load('/Users/dnplserv/vmPFC/MEDUSA Schaefer Analysis/HC_fb.Rdata') # loads hc
hc <- hc %>% arrange(id,run,trial,bin_num,evt_time,side) %>%
select(!atlas_value & !HC_region & !atlas_value0) %>%
mutate(side1 = case_when(side=='l'~'L',side=='r'~'R')) %>% select(!side) %>% rename(side=side1)
old_hc <- old_hc %>% filter(evt_time > -6 & evt_time < 10) %>% mutate(dataset = 'old')
hc <- hc %>% filter(evt_time > -6 & evt_time < 10) %>% mutate(dataset = 'new')
old_hc <- old_hc %>% rename(old_decon_mean = decon_interp)
gc()
colnames(old_hc)
hc_merged <- inner_join(hc,old_hc,by=c('id','run','trial','side','evt_time','bin_num'))
old_hc <- old_hc %>% mutate(side='L')
hc_merged <- inner_join(hc,old_hc,by=c('id','run','run_trial','side','evt_time','bin_num'))
rm(hc, old_hc)
gc()
hc_merged <- hc_merged %>% group_by(id,run,trial,side,evt_time,bin_num) %>% mutate(diff_new_old = new_decon_mean-old_decon_mean) %>% ungroup()
colnames(hc_merged)
hc_merged$dataset.x
hc_merged$dataset.y
source("~/vmPFC/test_old_new_MEDuSA_hc.R", echo=TRUE)
pdf('test_diff_new_old_hc.pdf',height=12,width=30)
gg1 <- ggplot(hc_merged, aes(x=diff_new_old)) + geom_histogram(bins=100) + facet_grid(evt_time~bin_num)
print(gg1)
dev.off()
dev.off()
dev.off()
raw <- hc_merged %>% group_by(bin_num,side,evt_time) %>%
summarize(mD_old = mean(old_decon_mean,na.rm=TRUE),mD_new = mean(new_decon_mean,na.rm=TRUE)) %>% ungroup()
raw <- raw %>% pivot_longer(cols=c(mD_old,mD_new),names_to='dataset')
ggplot(raw, aes(x=evt_time,y=value,color=dataset,group=dataset)) + facet_grid(bin_num~side) + geom_line()
corr_val <- hc_merged %>% group_by(evt_time,bin_num) %>% summarize(corr_val = cor(new_decon_mean,old_decon_mean,use='complete.obs')) %>% ungroup()
corr_val <- corr_val %>% pivot_wider(names_from = evt_time, values_from = corr_val)
corr_val <- corr_val %>% select(!bin_num)
corrplot(corr_val)
corr_val
ggcorrplot(corr_val)
ggcorrplot(corr_val,lab=TRUE) + xlab('bin_num')
